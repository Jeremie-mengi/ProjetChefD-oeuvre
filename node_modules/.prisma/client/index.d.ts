
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Eleve
 * 
 */
export type Eleve = $Result.DefaultSelection<Prisma.$ElevePayload>
/**
 * Model Tuteur
 * 
 */
export type Tuteur = $Result.DefaultSelection<Prisma.$TuteurPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Caissier
 * 
 */
export type Caissier = $Result.DefaultSelection<Prisma.$CaissierPayload>
/**
 * Model Paiement
 * 
 */
export type Paiement = $Result.DefaultSelection<Prisma.$PaiementPayload>
/**
 * Model Frais
 * 
 */
export type Frais = $Result.DefaultSelection<Prisma.$FraisPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;

  /**
   * `prisma.eleve`: Exposes CRUD operations for the **Eleve** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Eleves
    * const eleves = await prisma.eleve.findMany()
    * ```
    */
  get eleve(): Prisma.EleveDelegate<ExtArgs>;

  /**
   * `prisma.tuteur`: Exposes CRUD operations for the **Tuteur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tuteurs
    * const tuteurs = await prisma.tuteur.findMany()
    * ```
    */
  get tuteur(): Prisma.TuteurDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.caissier`: Exposes CRUD operations for the **Caissier** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Caissiers
    * const caissiers = await prisma.caissier.findMany()
    * ```
    */
  get caissier(): Prisma.CaissierDelegate<ExtArgs>;

  /**
   * `prisma.paiement`: Exposes CRUD operations for the **Paiement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Paiements
    * const paiements = await prisma.paiement.findMany()
    * ```
    */
  get paiement(): Prisma.PaiementDelegate<ExtArgs>;

  /**
   * `prisma.frais`: Exposes CRUD operations for the **Frais** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Frais
    * const frais = await prisma.frais.findMany()
    * ```
    */
  get frais(): Prisma.FraisDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Role: 'Role',
    Eleve: 'Eleve',
    Tuteur: 'Tuteur',
    Notification: 'Notification',
    Caissier: 'Caissier',
    Paiement: 'Paiement',
    Frais: 'Frais'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'role' | 'eleve' | 'tuteur' | 'notification' | 'caissier' | 'paiement' | 'frais'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>,
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Eleve: {
        payload: Prisma.$ElevePayload<ExtArgs>
        fields: Prisma.EleveFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EleveFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElevePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EleveFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElevePayload>
          }
          findFirst: {
            args: Prisma.EleveFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElevePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EleveFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElevePayload>
          }
          findMany: {
            args: Prisma.EleveFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElevePayload>[]
          }
          create: {
            args: Prisma.EleveCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElevePayload>
          }
          createMany: {
            args: Prisma.EleveCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EleveDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElevePayload>
          }
          update: {
            args: Prisma.EleveUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElevePayload>
          }
          deleteMany: {
            args: Prisma.EleveDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EleveUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EleveUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ElevePayload>
          }
          aggregate: {
            args: Prisma.EleveAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEleve>
          }
          groupBy: {
            args: Prisma.EleveGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EleveGroupByOutputType>[]
          }
          count: {
            args: Prisma.EleveCountArgs<ExtArgs>,
            result: $Utils.Optional<EleveCountAggregateOutputType> | number
          }
        }
      }
      Tuteur: {
        payload: Prisma.$TuteurPayload<ExtArgs>
        fields: Prisma.TuteurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TuteurFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TuteurFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          findFirst: {
            args: Prisma.TuteurFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TuteurFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          findMany: {
            args: Prisma.TuteurFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>[]
          }
          create: {
            args: Prisma.TuteurCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          createMany: {
            args: Prisma.TuteurCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TuteurDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          update: {
            args: Prisma.TuteurUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          deleteMany: {
            args: Prisma.TuteurDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TuteurUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TuteurUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TuteurPayload>
          }
          aggregate: {
            args: Prisma.TuteurAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTuteur>
          }
          groupBy: {
            args: Prisma.TuteurGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TuteurGroupByOutputType>[]
          }
          count: {
            args: Prisma.TuteurCountArgs<ExtArgs>,
            result: $Utils.Optional<TuteurCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Caissier: {
        payload: Prisma.$CaissierPayload<ExtArgs>
        fields: Prisma.CaissierFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaissierFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaissierPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaissierFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaissierPayload>
          }
          findFirst: {
            args: Prisma.CaissierFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaissierPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaissierFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaissierPayload>
          }
          findMany: {
            args: Prisma.CaissierFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaissierPayload>[]
          }
          create: {
            args: Prisma.CaissierCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaissierPayload>
          }
          createMany: {
            args: Prisma.CaissierCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CaissierDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaissierPayload>
          }
          update: {
            args: Prisma.CaissierUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaissierPayload>
          }
          deleteMany: {
            args: Prisma.CaissierDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CaissierUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CaissierUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaissierPayload>
          }
          aggregate: {
            args: Prisma.CaissierAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCaissier>
          }
          groupBy: {
            args: Prisma.CaissierGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CaissierGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaissierCountArgs<ExtArgs>,
            result: $Utils.Optional<CaissierCountAggregateOutputType> | number
          }
        }
      }
      Paiement: {
        payload: Prisma.$PaiementPayload<ExtArgs>
        fields: Prisma.PaiementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaiementFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaiementFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          findFirst: {
            args: Prisma.PaiementFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaiementFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          findMany: {
            args: Prisma.PaiementFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>[]
          }
          create: {
            args: Prisma.PaiementCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          createMany: {
            args: Prisma.PaiementCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PaiementDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          update: {
            args: Prisma.PaiementUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          deleteMany: {
            args: Prisma.PaiementDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PaiementUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PaiementUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaiementPayload>
          }
          aggregate: {
            args: Prisma.PaiementAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePaiement>
          }
          groupBy: {
            args: Prisma.PaiementGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PaiementGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaiementCountArgs<ExtArgs>,
            result: $Utils.Optional<PaiementCountAggregateOutputType> | number
          }
        }
      }
      Frais: {
        payload: Prisma.$FraisPayload<ExtArgs>
        fields: Prisma.FraisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FraisFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FraisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FraisFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FraisPayload>
          }
          findFirst: {
            args: Prisma.FraisFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FraisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FraisFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FraisPayload>
          }
          findMany: {
            args: Prisma.FraisFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FraisPayload>[]
          }
          create: {
            args: Prisma.FraisCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FraisPayload>
          }
          createMany: {
            args: Prisma.FraisCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FraisDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FraisPayload>
          }
          update: {
            args: Prisma.FraisUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FraisPayload>
          }
          deleteMany: {
            args: Prisma.FraisDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FraisUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FraisUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FraisPayload>
          }
          aggregate: {
            args: Prisma.FraisAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFrais>
          }
          groupBy: {
            args: Prisma.FraisGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FraisGroupByOutputType>[]
          }
          count: {
            args: Prisma.FraisCountArgs<ExtArgs>,
            result: $Utils.Optional<FraisCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    roles: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | UserCountOutputTypeCountRolesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
  }


  /**
   * Count Type TuteurCountOutputType
   */

  export type TuteurCountOutputType = {
    eleves: number
    notifications: number
    paiements: number
  }

  export type TuteurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eleves?: boolean | TuteurCountOutputTypeCountElevesArgs
    notifications?: boolean | TuteurCountOutputTypeCountNotificationsArgs
    paiements?: boolean | TuteurCountOutputTypeCountPaiementsArgs
  }

  // Custom InputTypes
  /**
   * TuteurCountOutputType without action
   */
  export type TuteurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TuteurCountOutputType
     */
    select?: TuteurCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TuteurCountOutputType without action
   */
  export type TuteurCountOutputTypeCountElevesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EleveWhereInput
  }

  /**
   * TuteurCountOutputType without action
   */
  export type TuteurCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * TuteurCountOutputType without action
   */
  export type TuteurCountOutputTypeCountPaiementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaiementWhereInput
  }


  /**
   * Count Type CaissierCountOutputType
   */

  export type CaissierCountOutputType = {
    notifications: number
    paiements: number
  }

  export type CaissierCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | CaissierCountOutputTypeCountNotificationsArgs
    paiements?: boolean | CaissierCountOutputTypeCountPaiementsArgs
  }

  // Custom InputTypes
  /**
   * CaissierCountOutputType without action
   */
  export type CaissierCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaissierCountOutputType
     */
    select?: CaissierCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CaissierCountOutputType without action
   */
  export type CaissierCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * CaissierCountOutputType without action
   */
  export type CaissierCountOutputTypeCountPaiementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaiementWhereInput
  }


  /**
   * Count Type FraisCountOutputType
   */

  export type FraisCountOutputType = {
    paiements: number
  }

  export type FraisCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paiements?: boolean | FraisCountOutputTypeCountPaiementsArgs
  }

  // Custom InputTypes
  /**
   * FraisCountOutputType without action
   */
  export type FraisCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FraisCountOutputType
     */
    select?: FraisCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FraisCountOutputType without action
   */
  export type FraisCountOutputTypeCountPaiementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaiementWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id_Us: number | null
    telephone: number | null
  }

  export type UserSumAggregateOutputType = {
    id_Us: number | null
    telephone: number | null
  }

  export type UserMinAggregateOutputType = {
    id_Us: number | null
    nom: string | null
    postnom: string | null
    email: string | null
    password: string | null
    telephone: number | null
  }

  export type UserMaxAggregateOutputType = {
    id_Us: number | null
    nom: string | null
    postnom: string | null
    email: string | null
    password: string | null
    telephone: number | null
  }

  export type UserCountAggregateOutputType = {
    id_Us: number
    nom: number
    postnom: number
    email: number
    password: number
    telephone: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id_Us?: true
    telephone?: true
  }

  export type UserSumAggregateInputType = {
    id_Us?: true
    telephone?: true
  }

  export type UserMinAggregateInputType = {
    id_Us?: true
    nom?: true
    postnom?: true
    email?: true
    password?: true
    telephone?: true
  }

  export type UserMaxAggregateInputType = {
    id_Us?: true
    nom?: true
    postnom?: true
    email?: true
    password?: true
    telephone?: true
  }

  export type UserCountAggregateInputType = {
    id_Us?: true
    nom?: true
    postnom?: true
    email?: true
    password?: true
    telephone?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id_Us: number
    nom: string
    postnom: string
    email: string
    password: string
    telephone: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Us?: boolean
    nom?: boolean
    postnom?: boolean
    email?: boolean
    password?: boolean
    telephone?: boolean
    roles?: boolean | User$rolesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id_Us?: boolean
    nom?: boolean
    postnom?: boolean
    email?: boolean
    password?: boolean
    telephone?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | User$rolesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      roles: Prisma.$RolePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Us: number
      nom: string
      postnom: string
      email: string
      password: string
      telephone: number
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id_Us`
     * const userWithId_UsOnly = await prisma.user.findMany({ select: { id_Us: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    roles<T extends User$rolesArgs<ExtArgs> = {}>(args?: Subset<T, User$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id_Us: FieldRef<"User", 'Int'>
    readonly nom: FieldRef<"User", 'String'>
    readonly postnom: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly telephone: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.roles
   */
  export type User$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    cursor?: RoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id_rol: number | null
    userId: number | null
  }

  export type RoleSumAggregateOutputType = {
    id_rol: number | null
    userId: number | null
  }

  export type RoleMinAggregateOutputType = {
    id_rol: number | null
    description: string | null
    userId: number | null
  }

  export type RoleMaxAggregateOutputType = {
    id_rol: number | null
    description: string | null
    userId: number | null
  }

  export type RoleCountAggregateOutputType = {
    id_rol: number
    description: number
    userId: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id_rol?: true
    userId?: true
  }

  export type RoleSumAggregateInputType = {
    id_rol?: true
    userId?: true
  }

  export type RoleMinAggregateInputType = {
    id_rol?: true
    description?: true
    userId?: true
  }

  export type RoleMaxAggregateInputType = {
    id_rol?: true
    description?: true
    userId?: true
  }

  export type RoleCountAggregateInputType = {
    id_rol?: true
    description?: true
    userId?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id_rol: number
    description: string
    userId: number
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_rol?: boolean
    description?: boolean
    userId?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id_rol?: boolean
    description?: boolean
    userId?: boolean
  }


  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_rol: number
      description: string
      userId: number
    }, ExtArgs["result"]["role"]>
    composites: {}
  }


  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id_rol`
     * const roleWithId_rolOnly = await prisma.role.findMany({ select: { id_rol: true } })
     * 
    **/
    findMany<T extends RoleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends RoleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RoleCreateArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Roles.
     *     @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const role = await prisma.role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends RoleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends RoleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly id_rol: FieldRef<"Role", 'Int'>
    readonly description: FieldRef<"Role", 'String'>
    readonly userId: FieldRef<"Role", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Eleve
   */

  export type AggregateEleve = {
    _count: EleveCountAggregateOutputType | null
    _avg: EleveAvgAggregateOutputType | null
    _sum: EleveSumAggregateOutputType | null
    _min: EleveMinAggregateOutputType | null
    _max: EleveMaxAggregateOutputType | null
  }

  export type EleveAvgAggregateOutputType = {
    id_El: number | null
    telephone: number | null
    tutId: number | null
  }

  export type EleveSumAggregateOutputType = {
    id_El: number | null
    telephone: number | null
    tutId: number | null
  }

  export type EleveMinAggregateOutputType = {
    id_El: number | null
    nom: string | null
    postnom: string | null
    prenom: string | null
    sexe: string | null
    adresse: string | null
    email: string | null
    telephone: number | null
    classe: string | null
    tutId: number | null
  }

  export type EleveMaxAggregateOutputType = {
    id_El: number | null
    nom: string | null
    postnom: string | null
    prenom: string | null
    sexe: string | null
    adresse: string | null
    email: string | null
    telephone: number | null
    classe: string | null
    tutId: number | null
  }

  export type EleveCountAggregateOutputType = {
    id_El: number
    nom: number
    postnom: number
    prenom: number
    sexe: number
    adresse: number
    email: number
    telephone: number
    classe: number
    tutId: number
    _all: number
  }


  export type EleveAvgAggregateInputType = {
    id_El?: true
    telephone?: true
    tutId?: true
  }

  export type EleveSumAggregateInputType = {
    id_El?: true
    telephone?: true
    tutId?: true
  }

  export type EleveMinAggregateInputType = {
    id_El?: true
    nom?: true
    postnom?: true
    prenom?: true
    sexe?: true
    adresse?: true
    email?: true
    telephone?: true
    classe?: true
    tutId?: true
  }

  export type EleveMaxAggregateInputType = {
    id_El?: true
    nom?: true
    postnom?: true
    prenom?: true
    sexe?: true
    adresse?: true
    email?: true
    telephone?: true
    classe?: true
    tutId?: true
  }

  export type EleveCountAggregateInputType = {
    id_El?: true
    nom?: true
    postnom?: true
    prenom?: true
    sexe?: true
    adresse?: true
    email?: true
    telephone?: true
    classe?: true
    tutId?: true
    _all?: true
  }

  export type EleveAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Eleve to aggregate.
     */
    where?: EleveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eleves to fetch.
     */
    orderBy?: EleveOrderByWithRelationInput | EleveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EleveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eleves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eleves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Eleves
    **/
    _count?: true | EleveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EleveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EleveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EleveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EleveMaxAggregateInputType
  }

  export type GetEleveAggregateType<T extends EleveAggregateArgs> = {
        [P in keyof T & keyof AggregateEleve]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEleve[P]>
      : GetScalarType<T[P], AggregateEleve[P]>
  }




  export type EleveGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EleveWhereInput
    orderBy?: EleveOrderByWithAggregationInput | EleveOrderByWithAggregationInput[]
    by: EleveScalarFieldEnum[] | EleveScalarFieldEnum
    having?: EleveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EleveCountAggregateInputType | true
    _avg?: EleveAvgAggregateInputType
    _sum?: EleveSumAggregateInputType
    _min?: EleveMinAggregateInputType
    _max?: EleveMaxAggregateInputType
  }

  export type EleveGroupByOutputType = {
    id_El: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    classe: string
    tutId: number
    _count: EleveCountAggregateOutputType | null
    _avg: EleveAvgAggregateOutputType | null
    _sum: EleveSumAggregateOutputType | null
    _min: EleveMinAggregateOutputType | null
    _max: EleveMaxAggregateOutputType | null
  }

  type GetEleveGroupByPayload<T extends EleveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EleveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EleveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EleveGroupByOutputType[P]>
            : GetScalarType<T[P], EleveGroupByOutputType[P]>
        }
      >
    >


  export type EleveSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_El?: boolean
    nom?: boolean
    postnom?: boolean
    prenom?: boolean
    sexe?: boolean
    adresse?: boolean
    email?: boolean
    telephone?: boolean
    classe?: boolean
    tutId?: boolean
    tuteurs?: boolean | TuteurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eleve"]>

  export type EleveSelectScalar = {
    id_El?: boolean
    nom?: boolean
    postnom?: boolean
    prenom?: boolean
    sexe?: boolean
    adresse?: boolean
    email?: boolean
    telephone?: boolean
    classe?: boolean
    tutId?: boolean
  }


  export type EleveInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tuteurs?: boolean | TuteurDefaultArgs<ExtArgs>
  }


  export type $ElevePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Eleve"
    objects: {
      tuteurs: Prisma.$TuteurPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_El: number
      nom: string
      postnom: string
      prenom: string
      sexe: string
      adresse: string
      email: string
      telephone: number
      classe: string
      tutId: number
    }, ExtArgs["result"]["eleve"]>
    composites: {}
  }


  type EleveGetPayload<S extends boolean | null | undefined | EleveDefaultArgs> = $Result.GetResult<Prisma.$ElevePayload, S>

  type EleveCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EleveFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EleveCountAggregateInputType | true
    }

  export interface EleveDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Eleve'], meta: { name: 'Eleve' } }
    /**
     * Find zero or one Eleve that matches the filter.
     * @param {EleveFindUniqueArgs} args - Arguments to find a Eleve
     * @example
     * // Get one Eleve
     * const eleve = await prisma.eleve.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EleveFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EleveFindUniqueArgs<ExtArgs>>
    ): Prisma__EleveClient<$Result.GetResult<Prisma.$ElevePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Eleve that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EleveFindUniqueOrThrowArgs} args - Arguments to find a Eleve
     * @example
     * // Get one Eleve
     * const eleve = await prisma.eleve.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EleveFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EleveFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EleveClient<$Result.GetResult<Prisma.$ElevePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Eleve that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EleveFindFirstArgs} args - Arguments to find a Eleve
     * @example
     * // Get one Eleve
     * const eleve = await prisma.eleve.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EleveFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EleveFindFirstArgs<ExtArgs>>
    ): Prisma__EleveClient<$Result.GetResult<Prisma.$ElevePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Eleve that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EleveFindFirstOrThrowArgs} args - Arguments to find a Eleve
     * @example
     * // Get one Eleve
     * const eleve = await prisma.eleve.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EleveFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EleveFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EleveClient<$Result.GetResult<Prisma.$ElevePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Eleves that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EleveFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Eleves
     * const eleves = await prisma.eleve.findMany()
     * 
     * // Get first 10 Eleves
     * const eleves = await prisma.eleve.findMany({ take: 10 })
     * 
     * // Only select the `id_El`
     * const eleveWithId_ElOnly = await prisma.eleve.findMany({ select: { id_El: true } })
     * 
    **/
    findMany<T extends EleveFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EleveFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ElevePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Eleve.
     * @param {EleveCreateArgs} args - Arguments to create a Eleve.
     * @example
     * // Create one Eleve
     * const Eleve = await prisma.eleve.create({
     *   data: {
     *     // ... data to create a Eleve
     *   }
     * })
     * 
    **/
    create<T extends EleveCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EleveCreateArgs<ExtArgs>>
    ): Prisma__EleveClient<$Result.GetResult<Prisma.$ElevePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Eleves.
     *     @param {EleveCreateManyArgs} args - Arguments to create many Eleves.
     *     @example
     *     // Create many Eleves
     *     const eleve = await prisma.eleve.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EleveCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EleveCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Eleve.
     * @param {EleveDeleteArgs} args - Arguments to delete one Eleve.
     * @example
     * // Delete one Eleve
     * const Eleve = await prisma.eleve.delete({
     *   where: {
     *     // ... filter to delete one Eleve
     *   }
     * })
     * 
    **/
    delete<T extends EleveDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EleveDeleteArgs<ExtArgs>>
    ): Prisma__EleveClient<$Result.GetResult<Prisma.$ElevePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Eleve.
     * @param {EleveUpdateArgs} args - Arguments to update one Eleve.
     * @example
     * // Update one Eleve
     * const eleve = await prisma.eleve.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EleveUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EleveUpdateArgs<ExtArgs>>
    ): Prisma__EleveClient<$Result.GetResult<Prisma.$ElevePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Eleves.
     * @param {EleveDeleteManyArgs} args - Arguments to filter Eleves to delete.
     * @example
     * // Delete a few Eleves
     * const { count } = await prisma.eleve.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EleveDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EleveDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Eleves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EleveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Eleves
     * const eleve = await prisma.eleve.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EleveUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EleveUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Eleve.
     * @param {EleveUpsertArgs} args - Arguments to update or create a Eleve.
     * @example
     * // Update or create a Eleve
     * const eleve = await prisma.eleve.upsert({
     *   create: {
     *     // ... data to create a Eleve
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Eleve we want to update
     *   }
     * })
    **/
    upsert<T extends EleveUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EleveUpsertArgs<ExtArgs>>
    ): Prisma__EleveClient<$Result.GetResult<Prisma.$ElevePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Eleves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EleveCountArgs} args - Arguments to filter Eleves to count.
     * @example
     * // Count the number of Eleves
     * const count = await prisma.eleve.count({
     *   where: {
     *     // ... the filter for the Eleves we want to count
     *   }
     * })
    **/
    count<T extends EleveCountArgs>(
      args?: Subset<T, EleveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EleveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Eleve.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EleveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EleveAggregateArgs>(args: Subset<T, EleveAggregateArgs>): Prisma.PrismaPromise<GetEleveAggregateType<T>>

    /**
     * Group by Eleve.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EleveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EleveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EleveGroupByArgs['orderBy'] }
        : { orderBy?: EleveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EleveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEleveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Eleve model
   */
  readonly fields: EleveFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Eleve.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EleveClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    tuteurs<T extends TuteurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TuteurDefaultArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Eleve model
   */ 
  interface EleveFieldRefs {
    readonly id_El: FieldRef<"Eleve", 'Int'>
    readonly nom: FieldRef<"Eleve", 'String'>
    readonly postnom: FieldRef<"Eleve", 'String'>
    readonly prenom: FieldRef<"Eleve", 'String'>
    readonly sexe: FieldRef<"Eleve", 'String'>
    readonly adresse: FieldRef<"Eleve", 'String'>
    readonly email: FieldRef<"Eleve", 'String'>
    readonly telephone: FieldRef<"Eleve", 'Int'>
    readonly classe: FieldRef<"Eleve", 'String'>
    readonly tutId: FieldRef<"Eleve", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Eleve findUnique
   */
  export type EleveFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eleve
     */
    select?: EleveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EleveInclude<ExtArgs> | null
    /**
     * Filter, which Eleve to fetch.
     */
    where: EleveWhereUniqueInput
  }

  /**
   * Eleve findUniqueOrThrow
   */
  export type EleveFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eleve
     */
    select?: EleveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EleveInclude<ExtArgs> | null
    /**
     * Filter, which Eleve to fetch.
     */
    where: EleveWhereUniqueInput
  }

  /**
   * Eleve findFirst
   */
  export type EleveFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eleve
     */
    select?: EleveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EleveInclude<ExtArgs> | null
    /**
     * Filter, which Eleve to fetch.
     */
    where?: EleveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eleves to fetch.
     */
    orderBy?: EleveOrderByWithRelationInput | EleveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eleves.
     */
    cursor?: EleveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eleves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eleves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eleves.
     */
    distinct?: EleveScalarFieldEnum | EleveScalarFieldEnum[]
  }

  /**
   * Eleve findFirstOrThrow
   */
  export type EleveFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eleve
     */
    select?: EleveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EleveInclude<ExtArgs> | null
    /**
     * Filter, which Eleve to fetch.
     */
    where?: EleveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eleves to fetch.
     */
    orderBy?: EleveOrderByWithRelationInput | EleveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eleves.
     */
    cursor?: EleveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eleves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eleves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eleves.
     */
    distinct?: EleveScalarFieldEnum | EleveScalarFieldEnum[]
  }

  /**
   * Eleve findMany
   */
  export type EleveFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eleve
     */
    select?: EleveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EleveInclude<ExtArgs> | null
    /**
     * Filter, which Eleves to fetch.
     */
    where?: EleveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eleves to fetch.
     */
    orderBy?: EleveOrderByWithRelationInput | EleveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Eleves.
     */
    cursor?: EleveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eleves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eleves.
     */
    skip?: number
    distinct?: EleveScalarFieldEnum | EleveScalarFieldEnum[]
  }

  /**
   * Eleve create
   */
  export type EleveCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eleve
     */
    select?: EleveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EleveInclude<ExtArgs> | null
    /**
     * The data needed to create a Eleve.
     */
    data: XOR<EleveCreateInput, EleveUncheckedCreateInput>
  }

  /**
   * Eleve createMany
   */
  export type EleveCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Eleves.
     */
    data: EleveCreateManyInput | EleveCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Eleve update
   */
  export type EleveUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eleve
     */
    select?: EleveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EleveInclude<ExtArgs> | null
    /**
     * The data needed to update a Eleve.
     */
    data: XOR<EleveUpdateInput, EleveUncheckedUpdateInput>
    /**
     * Choose, which Eleve to update.
     */
    where: EleveWhereUniqueInput
  }

  /**
   * Eleve updateMany
   */
  export type EleveUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Eleves.
     */
    data: XOR<EleveUpdateManyMutationInput, EleveUncheckedUpdateManyInput>
    /**
     * Filter which Eleves to update
     */
    where?: EleveWhereInput
  }

  /**
   * Eleve upsert
   */
  export type EleveUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eleve
     */
    select?: EleveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EleveInclude<ExtArgs> | null
    /**
     * The filter to search for the Eleve to update in case it exists.
     */
    where: EleveWhereUniqueInput
    /**
     * In case the Eleve found by the `where` argument doesn't exist, create a new Eleve with this data.
     */
    create: XOR<EleveCreateInput, EleveUncheckedCreateInput>
    /**
     * In case the Eleve was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EleveUpdateInput, EleveUncheckedUpdateInput>
  }

  /**
   * Eleve delete
   */
  export type EleveDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eleve
     */
    select?: EleveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EleveInclude<ExtArgs> | null
    /**
     * Filter which Eleve to delete.
     */
    where: EleveWhereUniqueInput
  }

  /**
   * Eleve deleteMany
   */
  export type EleveDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Eleves to delete
     */
    where?: EleveWhereInput
  }

  /**
   * Eleve without action
   */
  export type EleveDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eleve
     */
    select?: EleveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EleveInclude<ExtArgs> | null
  }


  /**
   * Model Tuteur
   */

  export type AggregateTuteur = {
    _count: TuteurCountAggregateOutputType | null
    _avg: TuteurAvgAggregateOutputType | null
    _sum: TuteurSumAggregateOutputType | null
    _min: TuteurMinAggregateOutputType | null
    _max: TuteurMaxAggregateOutputType | null
  }

  export type TuteurAvgAggregateOutputType = {
    id_Tut: number | null
    telephone: number | null
  }

  export type TuteurSumAggregateOutputType = {
    id_Tut: number | null
    telephone: number | null
  }

  export type TuteurMinAggregateOutputType = {
    id_Tut: number | null
    nom: string | null
    postnom: string | null
    prenom: string | null
    sexe: string | null
    adresse: string | null
    email: string | null
    telephone: number | null
  }

  export type TuteurMaxAggregateOutputType = {
    id_Tut: number | null
    nom: string | null
    postnom: string | null
    prenom: string | null
    sexe: string | null
    adresse: string | null
    email: string | null
    telephone: number | null
  }

  export type TuteurCountAggregateOutputType = {
    id_Tut: number
    nom: number
    postnom: number
    prenom: number
    sexe: number
    adresse: number
    email: number
    telephone: number
    _all: number
  }


  export type TuteurAvgAggregateInputType = {
    id_Tut?: true
    telephone?: true
  }

  export type TuteurSumAggregateInputType = {
    id_Tut?: true
    telephone?: true
  }

  export type TuteurMinAggregateInputType = {
    id_Tut?: true
    nom?: true
    postnom?: true
    prenom?: true
    sexe?: true
    adresse?: true
    email?: true
    telephone?: true
  }

  export type TuteurMaxAggregateInputType = {
    id_Tut?: true
    nom?: true
    postnom?: true
    prenom?: true
    sexe?: true
    adresse?: true
    email?: true
    telephone?: true
  }

  export type TuteurCountAggregateInputType = {
    id_Tut?: true
    nom?: true
    postnom?: true
    prenom?: true
    sexe?: true
    adresse?: true
    email?: true
    telephone?: true
    _all?: true
  }

  export type TuteurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tuteur to aggregate.
     */
    where?: TuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tuteurs to fetch.
     */
    orderBy?: TuteurOrderByWithRelationInput | TuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tuteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tuteurs
    **/
    _count?: true | TuteurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TuteurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TuteurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TuteurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TuteurMaxAggregateInputType
  }

  export type GetTuteurAggregateType<T extends TuteurAggregateArgs> = {
        [P in keyof T & keyof AggregateTuteur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTuteur[P]>
      : GetScalarType<T[P], AggregateTuteur[P]>
  }




  export type TuteurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TuteurWhereInput
    orderBy?: TuteurOrderByWithAggregationInput | TuteurOrderByWithAggregationInput[]
    by: TuteurScalarFieldEnum[] | TuteurScalarFieldEnum
    having?: TuteurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TuteurCountAggregateInputType | true
    _avg?: TuteurAvgAggregateInputType
    _sum?: TuteurSumAggregateInputType
    _min?: TuteurMinAggregateInputType
    _max?: TuteurMaxAggregateInputType
  }

  export type TuteurGroupByOutputType = {
    id_Tut: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    _count: TuteurCountAggregateOutputType | null
    _avg: TuteurAvgAggregateOutputType | null
    _sum: TuteurSumAggregateOutputType | null
    _min: TuteurMinAggregateOutputType | null
    _max: TuteurMaxAggregateOutputType | null
  }

  type GetTuteurGroupByPayload<T extends TuteurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TuteurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TuteurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TuteurGroupByOutputType[P]>
            : GetScalarType<T[P], TuteurGroupByOutputType[P]>
        }
      >
    >


  export type TuteurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Tut?: boolean
    nom?: boolean
    postnom?: boolean
    prenom?: boolean
    sexe?: boolean
    adresse?: boolean
    email?: boolean
    telephone?: boolean
    eleves?: boolean | Tuteur$elevesArgs<ExtArgs>
    notifications?: boolean | Tuteur$notificationsArgs<ExtArgs>
    paiements?: boolean | Tuteur$paiementsArgs<ExtArgs>
    _count?: boolean | TuteurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tuteur"]>

  export type TuteurSelectScalar = {
    id_Tut?: boolean
    nom?: boolean
    postnom?: boolean
    prenom?: boolean
    sexe?: boolean
    adresse?: boolean
    email?: boolean
    telephone?: boolean
  }


  export type TuteurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eleves?: boolean | Tuteur$elevesArgs<ExtArgs>
    notifications?: boolean | Tuteur$notificationsArgs<ExtArgs>
    paiements?: boolean | Tuteur$paiementsArgs<ExtArgs>
    _count?: boolean | TuteurCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TuteurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tuteur"
    objects: {
      eleves: Prisma.$ElevePayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      paiements: Prisma.$PaiementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Tut: number
      nom: string
      postnom: string
      prenom: string
      sexe: string
      adresse: string
      email: string
      telephone: number
    }, ExtArgs["result"]["tuteur"]>
    composites: {}
  }


  type TuteurGetPayload<S extends boolean | null | undefined | TuteurDefaultArgs> = $Result.GetResult<Prisma.$TuteurPayload, S>

  type TuteurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TuteurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TuteurCountAggregateInputType | true
    }

  export interface TuteurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tuteur'], meta: { name: 'Tuteur' } }
    /**
     * Find zero or one Tuteur that matches the filter.
     * @param {TuteurFindUniqueArgs} args - Arguments to find a Tuteur
     * @example
     * // Get one Tuteur
     * const tuteur = await prisma.tuteur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TuteurFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TuteurFindUniqueArgs<ExtArgs>>
    ): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tuteur that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TuteurFindUniqueOrThrowArgs} args - Arguments to find a Tuteur
     * @example
     * // Get one Tuteur
     * const tuteur = await prisma.tuteur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TuteurFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TuteurFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tuteur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurFindFirstArgs} args - Arguments to find a Tuteur
     * @example
     * // Get one Tuteur
     * const tuteur = await prisma.tuteur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TuteurFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TuteurFindFirstArgs<ExtArgs>>
    ): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tuteur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurFindFirstOrThrowArgs} args - Arguments to find a Tuteur
     * @example
     * // Get one Tuteur
     * const tuteur = await prisma.tuteur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TuteurFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TuteurFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tuteurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tuteurs
     * const tuteurs = await prisma.tuteur.findMany()
     * 
     * // Get first 10 Tuteurs
     * const tuteurs = await prisma.tuteur.findMany({ take: 10 })
     * 
     * // Only select the `id_Tut`
     * const tuteurWithId_TutOnly = await prisma.tuteur.findMany({ select: { id_Tut: true } })
     * 
    **/
    findMany<T extends TuteurFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TuteurFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tuteur.
     * @param {TuteurCreateArgs} args - Arguments to create a Tuteur.
     * @example
     * // Create one Tuteur
     * const Tuteur = await prisma.tuteur.create({
     *   data: {
     *     // ... data to create a Tuteur
     *   }
     * })
     * 
    **/
    create<T extends TuteurCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TuteurCreateArgs<ExtArgs>>
    ): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tuteurs.
     *     @param {TuteurCreateManyArgs} args - Arguments to create many Tuteurs.
     *     @example
     *     // Create many Tuteurs
     *     const tuteur = await prisma.tuteur.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TuteurCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TuteurCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tuteur.
     * @param {TuteurDeleteArgs} args - Arguments to delete one Tuteur.
     * @example
     * // Delete one Tuteur
     * const Tuteur = await prisma.tuteur.delete({
     *   where: {
     *     // ... filter to delete one Tuteur
     *   }
     * })
     * 
    **/
    delete<T extends TuteurDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TuteurDeleteArgs<ExtArgs>>
    ): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tuteur.
     * @param {TuteurUpdateArgs} args - Arguments to update one Tuteur.
     * @example
     * // Update one Tuteur
     * const tuteur = await prisma.tuteur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TuteurUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TuteurUpdateArgs<ExtArgs>>
    ): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tuteurs.
     * @param {TuteurDeleteManyArgs} args - Arguments to filter Tuteurs to delete.
     * @example
     * // Delete a few Tuteurs
     * const { count } = await prisma.tuteur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TuteurDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TuteurDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tuteurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tuteurs
     * const tuteur = await prisma.tuteur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TuteurUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TuteurUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tuteur.
     * @param {TuteurUpsertArgs} args - Arguments to update or create a Tuteur.
     * @example
     * // Update or create a Tuteur
     * const tuteur = await prisma.tuteur.upsert({
     *   create: {
     *     // ... data to create a Tuteur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tuteur we want to update
     *   }
     * })
    **/
    upsert<T extends TuteurUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TuteurUpsertArgs<ExtArgs>>
    ): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tuteurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurCountArgs} args - Arguments to filter Tuteurs to count.
     * @example
     * // Count the number of Tuteurs
     * const count = await prisma.tuteur.count({
     *   where: {
     *     // ... the filter for the Tuteurs we want to count
     *   }
     * })
    **/
    count<T extends TuteurCountArgs>(
      args?: Subset<T, TuteurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TuteurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tuteur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TuteurAggregateArgs>(args: Subset<T, TuteurAggregateArgs>): Prisma.PrismaPromise<GetTuteurAggregateType<T>>

    /**
     * Group by Tuteur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TuteurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TuteurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TuteurGroupByArgs['orderBy'] }
        : { orderBy?: TuteurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TuteurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTuteurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tuteur model
   */
  readonly fields: TuteurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tuteur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TuteurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    eleves<T extends Tuteur$elevesArgs<ExtArgs> = {}>(args?: Subset<T, Tuteur$elevesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ElevePayload<ExtArgs>, T, 'findMany'> | Null>;

    notifications<T extends Tuteur$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Tuteur$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    paiements<T extends Tuteur$paiementsArgs<ExtArgs> = {}>(args?: Subset<T, Tuteur$paiementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Tuteur model
   */ 
  interface TuteurFieldRefs {
    readonly id_Tut: FieldRef<"Tuteur", 'Int'>
    readonly nom: FieldRef<"Tuteur", 'String'>
    readonly postnom: FieldRef<"Tuteur", 'String'>
    readonly prenom: FieldRef<"Tuteur", 'String'>
    readonly sexe: FieldRef<"Tuteur", 'String'>
    readonly adresse: FieldRef<"Tuteur", 'String'>
    readonly email: FieldRef<"Tuteur", 'String'>
    readonly telephone: FieldRef<"Tuteur", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Tuteur findUnique
   */
  export type TuteurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter, which Tuteur to fetch.
     */
    where: TuteurWhereUniqueInput
  }

  /**
   * Tuteur findUniqueOrThrow
   */
  export type TuteurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter, which Tuteur to fetch.
     */
    where: TuteurWhereUniqueInput
  }

  /**
   * Tuteur findFirst
   */
  export type TuteurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter, which Tuteur to fetch.
     */
    where?: TuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tuteurs to fetch.
     */
    orderBy?: TuteurOrderByWithRelationInput | TuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tuteurs.
     */
    cursor?: TuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tuteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tuteurs.
     */
    distinct?: TuteurScalarFieldEnum | TuteurScalarFieldEnum[]
  }

  /**
   * Tuteur findFirstOrThrow
   */
  export type TuteurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter, which Tuteur to fetch.
     */
    where?: TuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tuteurs to fetch.
     */
    orderBy?: TuteurOrderByWithRelationInput | TuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tuteurs.
     */
    cursor?: TuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tuteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tuteurs.
     */
    distinct?: TuteurScalarFieldEnum | TuteurScalarFieldEnum[]
  }

  /**
   * Tuteur findMany
   */
  export type TuteurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter, which Tuteurs to fetch.
     */
    where?: TuteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tuteurs to fetch.
     */
    orderBy?: TuteurOrderByWithRelationInput | TuteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tuteurs.
     */
    cursor?: TuteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tuteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tuteurs.
     */
    skip?: number
    distinct?: TuteurScalarFieldEnum | TuteurScalarFieldEnum[]
  }

  /**
   * Tuteur create
   */
  export type TuteurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * The data needed to create a Tuteur.
     */
    data: XOR<TuteurCreateInput, TuteurUncheckedCreateInput>
  }

  /**
   * Tuteur createMany
   */
  export type TuteurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tuteurs.
     */
    data: TuteurCreateManyInput | TuteurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tuteur update
   */
  export type TuteurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * The data needed to update a Tuteur.
     */
    data: XOR<TuteurUpdateInput, TuteurUncheckedUpdateInput>
    /**
     * Choose, which Tuteur to update.
     */
    where: TuteurWhereUniqueInput
  }

  /**
   * Tuteur updateMany
   */
  export type TuteurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tuteurs.
     */
    data: XOR<TuteurUpdateManyMutationInput, TuteurUncheckedUpdateManyInput>
    /**
     * Filter which Tuteurs to update
     */
    where?: TuteurWhereInput
  }

  /**
   * Tuteur upsert
   */
  export type TuteurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * The filter to search for the Tuteur to update in case it exists.
     */
    where: TuteurWhereUniqueInput
    /**
     * In case the Tuteur found by the `where` argument doesn't exist, create a new Tuteur with this data.
     */
    create: XOR<TuteurCreateInput, TuteurUncheckedCreateInput>
    /**
     * In case the Tuteur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TuteurUpdateInput, TuteurUncheckedUpdateInput>
  }

  /**
   * Tuteur delete
   */
  export type TuteurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
    /**
     * Filter which Tuteur to delete.
     */
    where: TuteurWhereUniqueInput
  }

  /**
   * Tuteur deleteMany
   */
  export type TuteurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tuteurs to delete
     */
    where?: TuteurWhereInput
  }

  /**
   * Tuteur.eleves
   */
  export type Tuteur$elevesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Eleve
     */
    select?: EleveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EleveInclude<ExtArgs> | null
    where?: EleveWhereInput
    orderBy?: EleveOrderByWithRelationInput | EleveOrderByWithRelationInput[]
    cursor?: EleveWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EleveScalarFieldEnum | EleveScalarFieldEnum[]
  }

  /**
   * Tuteur.notifications
   */
  export type Tuteur$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Tuteur.paiements
   */
  export type Tuteur$paiementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    where?: PaiementWhereInput
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    cursor?: PaiementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaiementScalarFieldEnum | PaiementScalarFieldEnum[]
  }

  /**
   * Tuteur without action
   */
  export type TuteurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tuteur
     */
    select?: TuteurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TuteurInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id_Not: number | null
    tutId: number | null
    caisId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id_Not: number | null
    tutId: number | null
    caisId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id_Not: number | null
    message: string | null
    date_envoie: Date | null
    tutId: number | null
    caisId: number | null
  }

  export type NotificationMaxAggregateOutputType = {
    id_Not: number | null
    message: string | null
    date_envoie: Date | null
    tutId: number | null
    caisId: number | null
  }

  export type NotificationCountAggregateOutputType = {
    id_Not: number
    message: number
    date_envoie: number
    tutId: number
    caisId: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id_Not?: true
    tutId?: true
    caisId?: true
  }

  export type NotificationSumAggregateInputType = {
    id_Not?: true
    tutId?: true
    caisId?: true
  }

  export type NotificationMinAggregateInputType = {
    id_Not?: true
    message?: true
    date_envoie?: true
    tutId?: true
    caisId?: true
  }

  export type NotificationMaxAggregateInputType = {
    id_Not?: true
    message?: true
    date_envoie?: true
    tutId?: true
    caisId?: true
  }

  export type NotificationCountAggregateInputType = {
    id_Not?: true
    message?: true
    date_envoie?: true
    tutId?: true
    caisId?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id_Not: number
    message: string
    date_envoie: Date
    tutId: number
    caisId: number
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Not?: boolean
    message?: boolean
    date_envoie?: boolean
    tutId?: boolean
    caisId?: boolean
    tuteurs?: boolean | TuteurDefaultArgs<ExtArgs>
    caissiers?: boolean | CaissierDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id_Not?: boolean
    message?: boolean
    date_envoie?: boolean
    tutId?: boolean
    caisId?: boolean
  }


  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tuteurs?: boolean | TuteurDefaultArgs<ExtArgs>
    caissiers?: boolean | CaissierDefaultArgs<ExtArgs>
  }


  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      tuteurs: Prisma.$TuteurPayload<ExtArgs>
      caissiers: Prisma.$CaissierPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Not: number
      message: string
      date_envoie: Date
      tutId: number
      caisId: number
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }


  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id_Not`
     * const notificationWithId_NotOnly = await prisma.notification.findMany({ select: { id_Not: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    tuteurs<T extends TuteurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TuteurDefaultArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    caissiers<T extends CaissierDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaissierDefaultArgs<ExtArgs>>): Prisma__CaissierClient<$Result.GetResult<Prisma.$CaissierPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id_Not: FieldRef<"Notification", 'Int'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly date_envoie: FieldRef<"Notification", 'DateTime'>
    readonly tutId: FieldRef<"Notification", 'Int'>
    readonly caisId: FieldRef<"Notification", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Caissier
   */

  export type AggregateCaissier = {
    _count: CaissierCountAggregateOutputType | null
    _avg: CaissierAvgAggregateOutputType | null
    _sum: CaissierSumAggregateOutputType | null
    _min: CaissierMinAggregateOutputType | null
    _max: CaissierMaxAggregateOutputType | null
  }

  export type CaissierAvgAggregateOutputType = {
    id_Cais: number | null
    telephone: number | null
  }

  export type CaissierSumAggregateOutputType = {
    id_Cais: number | null
    telephone: number | null
  }

  export type CaissierMinAggregateOutputType = {
    id_Cais: number | null
    nom: string | null
    postnom: string | null
    prenom: string | null
    sexe: string | null
    adresse: string | null
    email: string | null
    telephone: number | null
  }

  export type CaissierMaxAggregateOutputType = {
    id_Cais: number | null
    nom: string | null
    postnom: string | null
    prenom: string | null
    sexe: string | null
    adresse: string | null
    email: string | null
    telephone: number | null
  }

  export type CaissierCountAggregateOutputType = {
    id_Cais: number
    nom: number
    postnom: number
    prenom: number
    sexe: number
    adresse: number
    email: number
    telephone: number
    _all: number
  }


  export type CaissierAvgAggregateInputType = {
    id_Cais?: true
    telephone?: true
  }

  export type CaissierSumAggregateInputType = {
    id_Cais?: true
    telephone?: true
  }

  export type CaissierMinAggregateInputType = {
    id_Cais?: true
    nom?: true
    postnom?: true
    prenom?: true
    sexe?: true
    adresse?: true
    email?: true
    telephone?: true
  }

  export type CaissierMaxAggregateInputType = {
    id_Cais?: true
    nom?: true
    postnom?: true
    prenom?: true
    sexe?: true
    adresse?: true
    email?: true
    telephone?: true
  }

  export type CaissierCountAggregateInputType = {
    id_Cais?: true
    nom?: true
    postnom?: true
    prenom?: true
    sexe?: true
    adresse?: true
    email?: true
    telephone?: true
    _all?: true
  }

  export type CaissierAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Caissier to aggregate.
     */
    where?: CaissierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Caissiers to fetch.
     */
    orderBy?: CaissierOrderByWithRelationInput | CaissierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaissierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Caissiers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Caissiers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Caissiers
    **/
    _count?: true | CaissierCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaissierAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaissierSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaissierMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaissierMaxAggregateInputType
  }

  export type GetCaissierAggregateType<T extends CaissierAggregateArgs> = {
        [P in keyof T & keyof AggregateCaissier]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaissier[P]>
      : GetScalarType<T[P], AggregateCaissier[P]>
  }




  export type CaissierGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaissierWhereInput
    orderBy?: CaissierOrderByWithAggregationInput | CaissierOrderByWithAggregationInput[]
    by: CaissierScalarFieldEnum[] | CaissierScalarFieldEnum
    having?: CaissierScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaissierCountAggregateInputType | true
    _avg?: CaissierAvgAggregateInputType
    _sum?: CaissierSumAggregateInputType
    _min?: CaissierMinAggregateInputType
    _max?: CaissierMaxAggregateInputType
  }

  export type CaissierGroupByOutputType = {
    id_Cais: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    _count: CaissierCountAggregateOutputType | null
    _avg: CaissierAvgAggregateOutputType | null
    _sum: CaissierSumAggregateOutputType | null
    _min: CaissierMinAggregateOutputType | null
    _max: CaissierMaxAggregateOutputType | null
  }

  type GetCaissierGroupByPayload<T extends CaissierGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaissierGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaissierGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaissierGroupByOutputType[P]>
            : GetScalarType<T[P], CaissierGroupByOutputType[P]>
        }
      >
    >


  export type CaissierSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Cais?: boolean
    nom?: boolean
    postnom?: boolean
    prenom?: boolean
    sexe?: boolean
    adresse?: boolean
    email?: boolean
    telephone?: boolean
    notifications?: boolean | Caissier$notificationsArgs<ExtArgs>
    paiements?: boolean | Caissier$paiementsArgs<ExtArgs>
    _count?: boolean | CaissierCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caissier"]>

  export type CaissierSelectScalar = {
    id_Cais?: boolean
    nom?: boolean
    postnom?: boolean
    prenom?: boolean
    sexe?: boolean
    adresse?: boolean
    email?: boolean
    telephone?: boolean
  }


  export type CaissierInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | Caissier$notificationsArgs<ExtArgs>
    paiements?: boolean | Caissier$paiementsArgs<ExtArgs>
    _count?: boolean | CaissierCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CaissierPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Caissier"
    objects: {
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      paiements: Prisma.$PaiementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Cais: number
      nom: string
      postnom: string
      prenom: string
      sexe: string
      adresse: string
      email: string
      telephone: number
    }, ExtArgs["result"]["caissier"]>
    composites: {}
  }


  type CaissierGetPayload<S extends boolean | null | undefined | CaissierDefaultArgs> = $Result.GetResult<Prisma.$CaissierPayload, S>

  type CaissierCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CaissierFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaissierCountAggregateInputType | true
    }

  export interface CaissierDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Caissier'], meta: { name: 'Caissier' } }
    /**
     * Find zero or one Caissier that matches the filter.
     * @param {CaissierFindUniqueArgs} args - Arguments to find a Caissier
     * @example
     * // Get one Caissier
     * const caissier = await prisma.caissier.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CaissierFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CaissierFindUniqueArgs<ExtArgs>>
    ): Prisma__CaissierClient<$Result.GetResult<Prisma.$CaissierPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Caissier that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CaissierFindUniqueOrThrowArgs} args - Arguments to find a Caissier
     * @example
     * // Get one Caissier
     * const caissier = await prisma.caissier.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CaissierFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CaissierFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CaissierClient<$Result.GetResult<Prisma.$CaissierPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Caissier that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaissierFindFirstArgs} args - Arguments to find a Caissier
     * @example
     * // Get one Caissier
     * const caissier = await prisma.caissier.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CaissierFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CaissierFindFirstArgs<ExtArgs>>
    ): Prisma__CaissierClient<$Result.GetResult<Prisma.$CaissierPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Caissier that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaissierFindFirstOrThrowArgs} args - Arguments to find a Caissier
     * @example
     * // Get one Caissier
     * const caissier = await prisma.caissier.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CaissierFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CaissierFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CaissierClient<$Result.GetResult<Prisma.$CaissierPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Caissiers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaissierFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Caissiers
     * const caissiers = await prisma.caissier.findMany()
     * 
     * // Get first 10 Caissiers
     * const caissiers = await prisma.caissier.findMany({ take: 10 })
     * 
     * // Only select the `id_Cais`
     * const caissierWithId_CaisOnly = await prisma.caissier.findMany({ select: { id_Cais: true } })
     * 
    **/
    findMany<T extends CaissierFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CaissierFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaissierPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Caissier.
     * @param {CaissierCreateArgs} args - Arguments to create a Caissier.
     * @example
     * // Create one Caissier
     * const Caissier = await prisma.caissier.create({
     *   data: {
     *     // ... data to create a Caissier
     *   }
     * })
     * 
    **/
    create<T extends CaissierCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CaissierCreateArgs<ExtArgs>>
    ): Prisma__CaissierClient<$Result.GetResult<Prisma.$CaissierPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Caissiers.
     *     @param {CaissierCreateManyArgs} args - Arguments to create many Caissiers.
     *     @example
     *     // Create many Caissiers
     *     const caissier = await prisma.caissier.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CaissierCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CaissierCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Caissier.
     * @param {CaissierDeleteArgs} args - Arguments to delete one Caissier.
     * @example
     * // Delete one Caissier
     * const Caissier = await prisma.caissier.delete({
     *   where: {
     *     // ... filter to delete one Caissier
     *   }
     * })
     * 
    **/
    delete<T extends CaissierDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CaissierDeleteArgs<ExtArgs>>
    ): Prisma__CaissierClient<$Result.GetResult<Prisma.$CaissierPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Caissier.
     * @param {CaissierUpdateArgs} args - Arguments to update one Caissier.
     * @example
     * // Update one Caissier
     * const caissier = await prisma.caissier.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CaissierUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CaissierUpdateArgs<ExtArgs>>
    ): Prisma__CaissierClient<$Result.GetResult<Prisma.$CaissierPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Caissiers.
     * @param {CaissierDeleteManyArgs} args - Arguments to filter Caissiers to delete.
     * @example
     * // Delete a few Caissiers
     * const { count } = await prisma.caissier.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CaissierDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CaissierDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Caissiers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaissierUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Caissiers
     * const caissier = await prisma.caissier.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CaissierUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CaissierUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Caissier.
     * @param {CaissierUpsertArgs} args - Arguments to update or create a Caissier.
     * @example
     * // Update or create a Caissier
     * const caissier = await prisma.caissier.upsert({
     *   create: {
     *     // ... data to create a Caissier
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Caissier we want to update
     *   }
     * })
    **/
    upsert<T extends CaissierUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CaissierUpsertArgs<ExtArgs>>
    ): Prisma__CaissierClient<$Result.GetResult<Prisma.$CaissierPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Caissiers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaissierCountArgs} args - Arguments to filter Caissiers to count.
     * @example
     * // Count the number of Caissiers
     * const count = await prisma.caissier.count({
     *   where: {
     *     // ... the filter for the Caissiers we want to count
     *   }
     * })
    **/
    count<T extends CaissierCountArgs>(
      args?: Subset<T, CaissierCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaissierCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Caissier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaissierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaissierAggregateArgs>(args: Subset<T, CaissierAggregateArgs>): Prisma.PrismaPromise<GetCaissierAggregateType<T>>

    /**
     * Group by Caissier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaissierGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaissierGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaissierGroupByArgs['orderBy'] }
        : { orderBy?: CaissierGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaissierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaissierGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Caissier model
   */
  readonly fields: CaissierFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Caissier.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaissierClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    notifications<T extends Caissier$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Caissier$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    paiements<T extends Caissier$paiementsArgs<ExtArgs> = {}>(args?: Subset<T, Caissier$paiementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Caissier model
   */ 
  interface CaissierFieldRefs {
    readonly id_Cais: FieldRef<"Caissier", 'Int'>
    readonly nom: FieldRef<"Caissier", 'String'>
    readonly postnom: FieldRef<"Caissier", 'String'>
    readonly prenom: FieldRef<"Caissier", 'String'>
    readonly sexe: FieldRef<"Caissier", 'String'>
    readonly adresse: FieldRef<"Caissier", 'String'>
    readonly email: FieldRef<"Caissier", 'String'>
    readonly telephone: FieldRef<"Caissier", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Caissier findUnique
   */
  export type CaissierFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caissier
     */
    select?: CaissierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaissierInclude<ExtArgs> | null
    /**
     * Filter, which Caissier to fetch.
     */
    where: CaissierWhereUniqueInput
  }

  /**
   * Caissier findUniqueOrThrow
   */
  export type CaissierFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caissier
     */
    select?: CaissierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaissierInclude<ExtArgs> | null
    /**
     * Filter, which Caissier to fetch.
     */
    where: CaissierWhereUniqueInput
  }

  /**
   * Caissier findFirst
   */
  export type CaissierFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caissier
     */
    select?: CaissierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaissierInclude<ExtArgs> | null
    /**
     * Filter, which Caissier to fetch.
     */
    where?: CaissierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Caissiers to fetch.
     */
    orderBy?: CaissierOrderByWithRelationInput | CaissierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Caissiers.
     */
    cursor?: CaissierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Caissiers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Caissiers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Caissiers.
     */
    distinct?: CaissierScalarFieldEnum | CaissierScalarFieldEnum[]
  }

  /**
   * Caissier findFirstOrThrow
   */
  export type CaissierFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caissier
     */
    select?: CaissierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaissierInclude<ExtArgs> | null
    /**
     * Filter, which Caissier to fetch.
     */
    where?: CaissierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Caissiers to fetch.
     */
    orderBy?: CaissierOrderByWithRelationInput | CaissierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Caissiers.
     */
    cursor?: CaissierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Caissiers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Caissiers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Caissiers.
     */
    distinct?: CaissierScalarFieldEnum | CaissierScalarFieldEnum[]
  }

  /**
   * Caissier findMany
   */
  export type CaissierFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caissier
     */
    select?: CaissierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaissierInclude<ExtArgs> | null
    /**
     * Filter, which Caissiers to fetch.
     */
    where?: CaissierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Caissiers to fetch.
     */
    orderBy?: CaissierOrderByWithRelationInput | CaissierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Caissiers.
     */
    cursor?: CaissierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Caissiers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Caissiers.
     */
    skip?: number
    distinct?: CaissierScalarFieldEnum | CaissierScalarFieldEnum[]
  }

  /**
   * Caissier create
   */
  export type CaissierCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caissier
     */
    select?: CaissierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaissierInclude<ExtArgs> | null
    /**
     * The data needed to create a Caissier.
     */
    data: XOR<CaissierCreateInput, CaissierUncheckedCreateInput>
  }

  /**
   * Caissier createMany
   */
  export type CaissierCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Caissiers.
     */
    data: CaissierCreateManyInput | CaissierCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Caissier update
   */
  export type CaissierUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caissier
     */
    select?: CaissierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaissierInclude<ExtArgs> | null
    /**
     * The data needed to update a Caissier.
     */
    data: XOR<CaissierUpdateInput, CaissierUncheckedUpdateInput>
    /**
     * Choose, which Caissier to update.
     */
    where: CaissierWhereUniqueInput
  }

  /**
   * Caissier updateMany
   */
  export type CaissierUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Caissiers.
     */
    data: XOR<CaissierUpdateManyMutationInput, CaissierUncheckedUpdateManyInput>
    /**
     * Filter which Caissiers to update
     */
    where?: CaissierWhereInput
  }

  /**
   * Caissier upsert
   */
  export type CaissierUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caissier
     */
    select?: CaissierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaissierInclude<ExtArgs> | null
    /**
     * The filter to search for the Caissier to update in case it exists.
     */
    where: CaissierWhereUniqueInput
    /**
     * In case the Caissier found by the `where` argument doesn't exist, create a new Caissier with this data.
     */
    create: XOR<CaissierCreateInput, CaissierUncheckedCreateInput>
    /**
     * In case the Caissier was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaissierUpdateInput, CaissierUncheckedUpdateInput>
  }

  /**
   * Caissier delete
   */
  export type CaissierDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caissier
     */
    select?: CaissierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaissierInclude<ExtArgs> | null
    /**
     * Filter which Caissier to delete.
     */
    where: CaissierWhereUniqueInput
  }

  /**
   * Caissier deleteMany
   */
  export type CaissierDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Caissiers to delete
     */
    where?: CaissierWhereInput
  }

  /**
   * Caissier.notifications
   */
  export type Caissier$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Caissier.paiements
   */
  export type Caissier$paiementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    where?: PaiementWhereInput
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    cursor?: PaiementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaiementScalarFieldEnum | PaiementScalarFieldEnum[]
  }

  /**
   * Caissier without action
   */
  export type CaissierDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caissier
     */
    select?: CaissierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaissierInclude<ExtArgs> | null
  }


  /**
   * Model Paiement
   */

  export type AggregatePaiement = {
    _count: PaiementCountAggregateOutputType | null
    _avg: PaiementAvgAggregateOutputType | null
    _sum: PaiementSumAggregateOutputType | null
    _min: PaiementMinAggregateOutputType | null
    _max: PaiementMaxAggregateOutputType | null
  }

  export type PaiementAvgAggregateOutputType = {
    id_Pai: number | null
    montantapaye: number | null
    montantpaye: number | null
    tutId: number | null
    caisId: number | null
    fraiId: number | null
  }

  export type PaiementSumAggregateOutputType = {
    id_Pai: number | null
    montantapaye: number | null
    montantpaye: number | null
    tutId: number | null
    caisId: number | null
    fraiId: number | null
  }

  export type PaiementMinAggregateOutputType = {
    id_Pai: number | null
    montantapaye: number | null
    montantpaye: number | null
    Datedepaiement: Date | null
    tutId: number | null
    caisId: number | null
    fraiId: number | null
  }

  export type PaiementMaxAggregateOutputType = {
    id_Pai: number | null
    montantapaye: number | null
    montantpaye: number | null
    Datedepaiement: Date | null
    tutId: number | null
    caisId: number | null
    fraiId: number | null
  }

  export type PaiementCountAggregateOutputType = {
    id_Pai: number
    montantapaye: number
    montantpaye: number
    Datedepaiement: number
    tutId: number
    caisId: number
    fraiId: number
    _all: number
  }


  export type PaiementAvgAggregateInputType = {
    id_Pai?: true
    montantapaye?: true
    montantpaye?: true
    tutId?: true
    caisId?: true
    fraiId?: true
  }

  export type PaiementSumAggregateInputType = {
    id_Pai?: true
    montantapaye?: true
    montantpaye?: true
    tutId?: true
    caisId?: true
    fraiId?: true
  }

  export type PaiementMinAggregateInputType = {
    id_Pai?: true
    montantapaye?: true
    montantpaye?: true
    Datedepaiement?: true
    tutId?: true
    caisId?: true
    fraiId?: true
  }

  export type PaiementMaxAggregateInputType = {
    id_Pai?: true
    montantapaye?: true
    montantpaye?: true
    Datedepaiement?: true
    tutId?: true
    caisId?: true
    fraiId?: true
  }

  export type PaiementCountAggregateInputType = {
    id_Pai?: true
    montantapaye?: true
    montantpaye?: true
    Datedepaiement?: true
    tutId?: true
    caisId?: true
    fraiId?: true
    _all?: true
  }

  export type PaiementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paiement to aggregate.
     */
    where?: PaiementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paiements to fetch.
     */
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaiementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paiements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paiements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Paiements
    **/
    _count?: true | PaiementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaiementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaiementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaiementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaiementMaxAggregateInputType
  }

  export type GetPaiementAggregateType<T extends PaiementAggregateArgs> = {
        [P in keyof T & keyof AggregatePaiement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaiement[P]>
      : GetScalarType<T[P], AggregatePaiement[P]>
  }




  export type PaiementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaiementWhereInput
    orderBy?: PaiementOrderByWithAggregationInput | PaiementOrderByWithAggregationInput[]
    by: PaiementScalarFieldEnum[] | PaiementScalarFieldEnum
    having?: PaiementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaiementCountAggregateInputType | true
    _avg?: PaiementAvgAggregateInputType
    _sum?: PaiementSumAggregateInputType
    _min?: PaiementMinAggregateInputType
    _max?: PaiementMaxAggregateInputType
  }

  export type PaiementGroupByOutputType = {
    id_Pai: number
    montantapaye: number
    montantpaye: number
    Datedepaiement: Date
    tutId: number
    caisId: number
    fraiId: number
    _count: PaiementCountAggregateOutputType | null
    _avg: PaiementAvgAggregateOutputType | null
    _sum: PaiementSumAggregateOutputType | null
    _min: PaiementMinAggregateOutputType | null
    _max: PaiementMaxAggregateOutputType | null
  }

  type GetPaiementGroupByPayload<T extends PaiementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaiementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaiementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaiementGroupByOutputType[P]>
            : GetScalarType<T[P], PaiementGroupByOutputType[P]>
        }
      >
    >


  export type PaiementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Pai?: boolean
    montantapaye?: boolean
    montantpaye?: boolean
    Datedepaiement?: boolean
    tutId?: boolean
    caisId?: boolean
    fraiId?: boolean
    tuteurs?: boolean | TuteurDefaultArgs<ExtArgs>
    caissiers?: boolean | CaissierDefaultArgs<ExtArgs>
    frais?: boolean | FraisDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paiement"]>

  export type PaiementSelectScalar = {
    id_Pai?: boolean
    montantapaye?: boolean
    montantpaye?: boolean
    Datedepaiement?: boolean
    tutId?: boolean
    caisId?: boolean
    fraiId?: boolean
  }


  export type PaiementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tuteurs?: boolean | TuteurDefaultArgs<ExtArgs>
    caissiers?: boolean | CaissierDefaultArgs<ExtArgs>
    frais?: boolean | FraisDefaultArgs<ExtArgs>
  }


  export type $PaiementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Paiement"
    objects: {
      tuteurs: Prisma.$TuteurPayload<ExtArgs>
      caissiers: Prisma.$CaissierPayload<ExtArgs>
      frais: Prisma.$FraisPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Pai: number
      montantapaye: number
      montantpaye: number
      Datedepaiement: Date
      tutId: number
      caisId: number
      fraiId: number
    }, ExtArgs["result"]["paiement"]>
    composites: {}
  }


  type PaiementGetPayload<S extends boolean | null | undefined | PaiementDefaultArgs> = $Result.GetResult<Prisma.$PaiementPayload, S>

  type PaiementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaiementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaiementCountAggregateInputType | true
    }

  export interface PaiementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Paiement'], meta: { name: 'Paiement' } }
    /**
     * Find zero or one Paiement that matches the filter.
     * @param {PaiementFindUniqueArgs} args - Arguments to find a Paiement
     * @example
     * // Get one Paiement
     * const paiement = await prisma.paiement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PaiementFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PaiementFindUniqueArgs<ExtArgs>>
    ): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Paiement that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PaiementFindUniqueOrThrowArgs} args - Arguments to find a Paiement
     * @example
     * // Get one Paiement
     * const paiement = await prisma.paiement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PaiementFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaiementFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Paiement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementFindFirstArgs} args - Arguments to find a Paiement
     * @example
     * // Get one Paiement
     * const paiement = await prisma.paiement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PaiementFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PaiementFindFirstArgs<ExtArgs>>
    ): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Paiement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementFindFirstOrThrowArgs} args - Arguments to find a Paiement
     * @example
     * // Get one Paiement
     * const paiement = await prisma.paiement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PaiementFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaiementFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Paiements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Paiements
     * const paiements = await prisma.paiement.findMany()
     * 
     * // Get first 10 Paiements
     * const paiements = await prisma.paiement.findMany({ take: 10 })
     * 
     * // Only select the `id_Pai`
     * const paiementWithId_PaiOnly = await prisma.paiement.findMany({ select: { id_Pai: true } })
     * 
    **/
    findMany<T extends PaiementFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaiementFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Paiement.
     * @param {PaiementCreateArgs} args - Arguments to create a Paiement.
     * @example
     * // Create one Paiement
     * const Paiement = await prisma.paiement.create({
     *   data: {
     *     // ... data to create a Paiement
     *   }
     * })
     * 
    **/
    create<T extends PaiementCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PaiementCreateArgs<ExtArgs>>
    ): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Paiements.
     *     @param {PaiementCreateManyArgs} args - Arguments to create many Paiements.
     *     @example
     *     // Create many Paiements
     *     const paiement = await prisma.paiement.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PaiementCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaiementCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Paiement.
     * @param {PaiementDeleteArgs} args - Arguments to delete one Paiement.
     * @example
     * // Delete one Paiement
     * const Paiement = await prisma.paiement.delete({
     *   where: {
     *     // ... filter to delete one Paiement
     *   }
     * })
     * 
    **/
    delete<T extends PaiementDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PaiementDeleteArgs<ExtArgs>>
    ): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Paiement.
     * @param {PaiementUpdateArgs} args - Arguments to update one Paiement.
     * @example
     * // Update one Paiement
     * const paiement = await prisma.paiement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PaiementUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PaiementUpdateArgs<ExtArgs>>
    ): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Paiements.
     * @param {PaiementDeleteManyArgs} args - Arguments to filter Paiements to delete.
     * @example
     * // Delete a few Paiements
     * const { count } = await prisma.paiement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PaiementDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaiementDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Paiements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Paiements
     * const paiement = await prisma.paiement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PaiementUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PaiementUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Paiement.
     * @param {PaiementUpsertArgs} args - Arguments to update or create a Paiement.
     * @example
     * // Update or create a Paiement
     * const paiement = await prisma.paiement.upsert({
     *   create: {
     *     // ... data to create a Paiement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paiement we want to update
     *   }
     * })
    **/
    upsert<T extends PaiementUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PaiementUpsertArgs<ExtArgs>>
    ): Prisma__PaiementClient<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Paiements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementCountArgs} args - Arguments to filter Paiements to count.
     * @example
     * // Count the number of Paiements
     * const count = await prisma.paiement.count({
     *   where: {
     *     // ... the filter for the Paiements we want to count
     *   }
     * })
    **/
    count<T extends PaiementCountArgs>(
      args?: Subset<T, PaiementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaiementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paiement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaiementAggregateArgs>(args: Subset<T, PaiementAggregateArgs>): Prisma.PrismaPromise<GetPaiementAggregateType<T>>

    /**
     * Group by Paiement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaiementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaiementGroupByArgs['orderBy'] }
        : { orderBy?: PaiementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaiementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaiementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Paiement model
   */
  readonly fields: PaiementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Paiement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaiementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    tuteurs<T extends TuteurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TuteurDefaultArgs<ExtArgs>>): Prisma__TuteurClient<$Result.GetResult<Prisma.$TuteurPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    caissiers<T extends CaissierDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaissierDefaultArgs<ExtArgs>>): Prisma__CaissierClient<$Result.GetResult<Prisma.$CaissierPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    frais<T extends FraisDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FraisDefaultArgs<ExtArgs>>): Prisma__FraisClient<$Result.GetResult<Prisma.$FraisPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Paiement model
   */ 
  interface PaiementFieldRefs {
    readonly id_Pai: FieldRef<"Paiement", 'Int'>
    readonly montantapaye: FieldRef<"Paiement", 'Int'>
    readonly montantpaye: FieldRef<"Paiement", 'Int'>
    readonly Datedepaiement: FieldRef<"Paiement", 'DateTime'>
    readonly tutId: FieldRef<"Paiement", 'Int'>
    readonly caisId: FieldRef<"Paiement", 'Int'>
    readonly fraiId: FieldRef<"Paiement", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Paiement findUnique
   */
  export type PaiementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter, which Paiement to fetch.
     */
    where: PaiementWhereUniqueInput
  }

  /**
   * Paiement findUniqueOrThrow
   */
  export type PaiementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter, which Paiement to fetch.
     */
    where: PaiementWhereUniqueInput
  }

  /**
   * Paiement findFirst
   */
  export type PaiementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter, which Paiement to fetch.
     */
    where?: PaiementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paiements to fetch.
     */
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paiements.
     */
    cursor?: PaiementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paiements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paiements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paiements.
     */
    distinct?: PaiementScalarFieldEnum | PaiementScalarFieldEnum[]
  }

  /**
   * Paiement findFirstOrThrow
   */
  export type PaiementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter, which Paiement to fetch.
     */
    where?: PaiementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paiements to fetch.
     */
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paiements.
     */
    cursor?: PaiementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paiements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paiements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paiements.
     */
    distinct?: PaiementScalarFieldEnum | PaiementScalarFieldEnum[]
  }

  /**
   * Paiement findMany
   */
  export type PaiementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter, which Paiements to fetch.
     */
    where?: PaiementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paiements to fetch.
     */
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Paiements.
     */
    cursor?: PaiementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paiements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paiements.
     */
    skip?: number
    distinct?: PaiementScalarFieldEnum | PaiementScalarFieldEnum[]
  }

  /**
   * Paiement create
   */
  export type PaiementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * The data needed to create a Paiement.
     */
    data: XOR<PaiementCreateInput, PaiementUncheckedCreateInput>
  }

  /**
   * Paiement createMany
   */
  export type PaiementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Paiements.
     */
    data: PaiementCreateManyInput | PaiementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Paiement update
   */
  export type PaiementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * The data needed to update a Paiement.
     */
    data: XOR<PaiementUpdateInput, PaiementUncheckedUpdateInput>
    /**
     * Choose, which Paiement to update.
     */
    where: PaiementWhereUniqueInput
  }

  /**
   * Paiement updateMany
   */
  export type PaiementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Paiements.
     */
    data: XOR<PaiementUpdateManyMutationInput, PaiementUncheckedUpdateManyInput>
    /**
     * Filter which Paiements to update
     */
    where?: PaiementWhereInput
  }

  /**
   * Paiement upsert
   */
  export type PaiementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * The filter to search for the Paiement to update in case it exists.
     */
    where: PaiementWhereUniqueInput
    /**
     * In case the Paiement found by the `where` argument doesn't exist, create a new Paiement with this data.
     */
    create: XOR<PaiementCreateInput, PaiementUncheckedCreateInput>
    /**
     * In case the Paiement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaiementUpdateInput, PaiementUncheckedUpdateInput>
  }

  /**
   * Paiement delete
   */
  export type PaiementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    /**
     * Filter which Paiement to delete.
     */
    where: PaiementWhereUniqueInput
  }

  /**
   * Paiement deleteMany
   */
  export type PaiementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paiements to delete
     */
    where?: PaiementWhereInput
  }

  /**
   * Paiement without action
   */
  export type PaiementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
  }


  /**
   * Model Frais
   */

  export type AggregateFrais = {
    _count: FraisCountAggregateOutputType | null
    _avg: FraisAvgAggregateOutputType | null
    _sum: FraisSumAggregateOutputType | null
    _min: FraisMinAggregateOutputType | null
    _max: FraisMaxAggregateOutputType | null
  }

  export type FraisAvgAggregateOutputType = {
    id_Frai: number | null
    montantFrais: number | null
  }

  export type FraisSumAggregateOutputType = {
    id_Frai: number | null
    montantFrais: number | null
  }

  export type FraisMinAggregateOutputType = {
    id_Frai: number | null
    libelle: string | null
    montantFrais: number | null
    DateLimite: Date | null
  }

  export type FraisMaxAggregateOutputType = {
    id_Frai: number | null
    libelle: string | null
    montantFrais: number | null
    DateLimite: Date | null
  }

  export type FraisCountAggregateOutputType = {
    id_Frai: number
    libelle: number
    montantFrais: number
    DateLimite: number
    _all: number
  }


  export type FraisAvgAggregateInputType = {
    id_Frai?: true
    montantFrais?: true
  }

  export type FraisSumAggregateInputType = {
    id_Frai?: true
    montantFrais?: true
  }

  export type FraisMinAggregateInputType = {
    id_Frai?: true
    libelle?: true
    montantFrais?: true
    DateLimite?: true
  }

  export type FraisMaxAggregateInputType = {
    id_Frai?: true
    libelle?: true
    montantFrais?: true
    DateLimite?: true
  }

  export type FraisCountAggregateInputType = {
    id_Frai?: true
    libelle?: true
    montantFrais?: true
    DateLimite?: true
    _all?: true
  }

  export type FraisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Frais to aggregate.
     */
    where?: FraisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Frais to fetch.
     */
    orderBy?: FraisOrderByWithRelationInput | FraisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FraisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Frais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Frais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Frais
    **/
    _count?: true | FraisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FraisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FraisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FraisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FraisMaxAggregateInputType
  }

  export type GetFraisAggregateType<T extends FraisAggregateArgs> = {
        [P in keyof T & keyof AggregateFrais]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFrais[P]>
      : GetScalarType<T[P], AggregateFrais[P]>
  }




  export type FraisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FraisWhereInput
    orderBy?: FraisOrderByWithAggregationInput | FraisOrderByWithAggregationInput[]
    by: FraisScalarFieldEnum[] | FraisScalarFieldEnum
    having?: FraisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FraisCountAggregateInputType | true
    _avg?: FraisAvgAggregateInputType
    _sum?: FraisSumAggregateInputType
    _min?: FraisMinAggregateInputType
    _max?: FraisMaxAggregateInputType
  }

  export type FraisGroupByOutputType = {
    id_Frai: number
    libelle: string
    montantFrais: number
    DateLimite: Date
    _count: FraisCountAggregateOutputType | null
    _avg: FraisAvgAggregateOutputType | null
    _sum: FraisSumAggregateOutputType | null
    _min: FraisMinAggregateOutputType | null
    _max: FraisMaxAggregateOutputType | null
  }

  type GetFraisGroupByPayload<T extends FraisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FraisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FraisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FraisGroupByOutputType[P]>
            : GetScalarType<T[P], FraisGroupByOutputType[P]>
        }
      >
    >


  export type FraisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Frai?: boolean
    libelle?: boolean
    montantFrais?: boolean
    DateLimite?: boolean
    paiements?: boolean | Frais$paiementsArgs<ExtArgs>
    _count?: boolean | FraisCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["frais"]>

  export type FraisSelectScalar = {
    id_Frai?: boolean
    libelle?: boolean
    montantFrais?: boolean
    DateLimite?: boolean
  }


  export type FraisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paiements?: boolean | Frais$paiementsArgs<ExtArgs>
    _count?: boolean | FraisCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $FraisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Frais"
    objects: {
      paiements: Prisma.$PaiementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Frai: number
      libelle: string
      montantFrais: number
      DateLimite: Date
    }, ExtArgs["result"]["frais"]>
    composites: {}
  }


  type FraisGetPayload<S extends boolean | null | undefined | FraisDefaultArgs> = $Result.GetResult<Prisma.$FraisPayload, S>

  type FraisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FraisFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FraisCountAggregateInputType | true
    }

  export interface FraisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Frais'], meta: { name: 'Frais' } }
    /**
     * Find zero or one Frais that matches the filter.
     * @param {FraisFindUniqueArgs} args - Arguments to find a Frais
     * @example
     * // Get one Frais
     * const frais = await prisma.frais.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FraisFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FraisFindUniqueArgs<ExtArgs>>
    ): Prisma__FraisClient<$Result.GetResult<Prisma.$FraisPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Frais that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FraisFindUniqueOrThrowArgs} args - Arguments to find a Frais
     * @example
     * // Get one Frais
     * const frais = await prisma.frais.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FraisFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FraisFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FraisClient<$Result.GetResult<Prisma.$FraisPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Frais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FraisFindFirstArgs} args - Arguments to find a Frais
     * @example
     * // Get one Frais
     * const frais = await prisma.frais.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FraisFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FraisFindFirstArgs<ExtArgs>>
    ): Prisma__FraisClient<$Result.GetResult<Prisma.$FraisPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Frais that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FraisFindFirstOrThrowArgs} args - Arguments to find a Frais
     * @example
     * // Get one Frais
     * const frais = await prisma.frais.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FraisFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FraisFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FraisClient<$Result.GetResult<Prisma.$FraisPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Frais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FraisFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Frais
     * const frais = await prisma.frais.findMany()
     * 
     * // Get first 10 Frais
     * const frais = await prisma.frais.findMany({ take: 10 })
     * 
     * // Only select the `id_Frai`
     * const fraisWithId_FraiOnly = await prisma.frais.findMany({ select: { id_Frai: true } })
     * 
    **/
    findMany<T extends FraisFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FraisFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FraisPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Frais.
     * @param {FraisCreateArgs} args - Arguments to create a Frais.
     * @example
     * // Create one Frais
     * const Frais = await prisma.frais.create({
     *   data: {
     *     // ... data to create a Frais
     *   }
     * })
     * 
    **/
    create<T extends FraisCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FraisCreateArgs<ExtArgs>>
    ): Prisma__FraisClient<$Result.GetResult<Prisma.$FraisPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Frais.
     *     @param {FraisCreateManyArgs} args - Arguments to create many Frais.
     *     @example
     *     // Create many Frais
     *     const frais = await prisma.frais.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FraisCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FraisCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Frais.
     * @param {FraisDeleteArgs} args - Arguments to delete one Frais.
     * @example
     * // Delete one Frais
     * const Frais = await prisma.frais.delete({
     *   where: {
     *     // ... filter to delete one Frais
     *   }
     * })
     * 
    **/
    delete<T extends FraisDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FraisDeleteArgs<ExtArgs>>
    ): Prisma__FraisClient<$Result.GetResult<Prisma.$FraisPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Frais.
     * @param {FraisUpdateArgs} args - Arguments to update one Frais.
     * @example
     * // Update one Frais
     * const frais = await prisma.frais.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FraisUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FraisUpdateArgs<ExtArgs>>
    ): Prisma__FraisClient<$Result.GetResult<Prisma.$FraisPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Frais.
     * @param {FraisDeleteManyArgs} args - Arguments to filter Frais to delete.
     * @example
     * // Delete a few Frais
     * const { count } = await prisma.frais.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FraisDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FraisDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Frais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FraisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Frais
     * const frais = await prisma.frais.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FraisUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FraisUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Frais.
     * @param {FraisUpsertArgs} args - Arguments to update or create a Frais.
     * @example
     * // Update or create a Frais
     * const frais = await prisma.frais.upsert({
     *   create: {
     *     // ... data to create a Frais
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Frais we want to update
     *   }
     * })
    **/
    upsert<T extends FraisUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FraisUpsertArgs<ExtArgs>>
    ): Prisma__FraisClient<$Result.GetResult<Prisma.$FraisPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Frais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FraisCountArgs} args - Arguments to filter Frais to count.
     * @example
     * // Count the number of Frais
     * const count = await prisma.frais.count({
     *   where: {
     *     // ... the filter for the Frais we want to count
     *   }
     * })
    **/
    count<T extends FraisCountArgs>(
      args?: Subset<T, FraisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FraisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Frais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FraisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FraisAggregateArgs>(args: Subset<T, FraisAggregateArgs>): Prisma.PrismaPromise<GetFraisAggregateType<T>>

    /**
     * Group by Frais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FraisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FraisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FraisGroupByArgs['orderBy'] }
        : { orderBy?: FraisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FraisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFraisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Frais model
   */
  readonly fields: FraisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Frais.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FraisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    paiements<T extends Frais$paiementsArgs<ExtArgs> = {}>(args?: Subset<T, Frais$paiementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaiementPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Frais model
   */ 
  interface FraisFieldRefs {
    readonly id_Frai: FieldRef<"Frais", 'Int'>
    readonly libelle: FieldRef<"Frais", 'String'>
    readonly montantFrais: FieldRef<"Frais", 'Int'>
    readonly DateLimite: FieldRef<"Frais", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Frais findUnique
   */
  export type FraisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frais
     */
    select?: FraisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FraisInclude<ExtArgs> | null
    /**
     * Filter, which Frais to fetch.
     */
    where: FraisWhereUniqueInput
  }

  /**
   * Frais findUniqueOrThrow
   */
  export type FraisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frais
     */
    select?: FraisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FraisInclude<ExtArgs> | null
    /**
     * Filter, which Frais to fetch.
     */
    where: FraisWhereUniqueInput
  }

  /**
   * Frais findFirst
   */
  export type FraisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frais
     */
    select?: FraisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FraisInclude<ExtArgs> | null
    /**
     * Filter, which Frais to fetch.
     */
    where?: FraisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Frais to fetch.
     */
    orderBy?: FraisOrderByWithRelationInput | FraisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Frais.
     */
    cursor?: FraisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Frais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Frais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Frais.
     */
    distinct?: FraisScalarFieldEnum | FraisScalarFieldEnum[]
  }

  /**
   * Frais findFirstOrThrow
   */
  export type FraisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frais
     */
    select?: FraisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FraisInclude<ExtArgs> | null
    /**
     * Filter, which Frais to fetch.
     */
    where?: FraisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Frais to fetch.
     */
    orderBy?: FraisOrderByWithRelationInput | FraisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Frais.
     */
    cursor?: FraisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Frais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Frais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Frais.
     */
    distinct?: FraisScalarFieldEnum | FraisScalarFieldEnum[]
  }

  /**
   * Frais findMany
   */
  export type FraisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frais
     */
    select?: FraisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FraisInclude<ExtArgs> | null
    /**
     * Filter, which Frais to fetch.
     */
    where?: FraisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Frais to fetch.
     */
    orderBy?: FraisOrderByWithRelationInput | FraisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Frais.
     */
    cursor?: FraisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Frais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Frais.
     */
    skip?: number
    distinct?: FraisScalarFieldEnum | FraisScalarFieldEnum[]
  }

  /**
   * Frais create
   */
  export type FraisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frais
     */
    select?: FraisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FraisInclude<ExtArgs> | null
    /**
     * The data needed to create a Frais.
     */
    data: XOR<FraisCreateInput, FraisUncheckedCreateInput>
  }

  /**
   * Frais createMany
   */
  export type FraisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Frais.
     */
    data: FraisCreateManyInput | FraisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Frais update
   */
  export type FraisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frais
     */
    select?: FraisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FraisInclude<ExtArgs> | null
    /**
     * The data needed to update a Frais.
     */
    data: XOR<FraisUpdateInput, FraisUncheckedUpdateInput>
    /**
     * Choose, which Frais to update.
     */
    where: FraisWhereUniqueInput
  }

  /**
   * Frais updateMany
   */
  export type FraisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Frais.
     */
    data: XOR<FraisUpdateManyMutationInput, FraisUncheckedUpdateManyInput>
    /**
     * Filter which Frais to update
     */
    where?: FraisWhereInput
  }

  /**
   * Frais upsert
   */
  export type FraisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frais
     */
    select?: FraisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FraisInclude<ExtArgs> | null
    /**
     * The filter to search for the Frais to update in case it exists.
     */
    where: FraisWhereUniqueInput
    /**
     * In case the Frais found by the `where` argument doesn't exist, create a new Frais with this data.
     */
    create: XOR<FraisCreateInput, FraisUncheckedCreateInput>
    /**
     * In case the Frais was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FraisUpdateInput, FraisUncheckedUpdateInput>
  }

  /**
   * Frais delete
   */
  export type FraisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frais
     */
    select?: FraisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FraisInclude<ExtArgs> | null
    /**
     * Filter which Frais to delete.
     */
    where: FraisWhereUniqueInput
  }

  /**
   * Frais deleteMany
   */
  export type FraisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Frais to delete
     */
    where?: FraisWhereInput
  }

  /**
   * Frais.paiements
   */
  export type Frais$paiementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paiement
     */
    select?: PaiementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementInclude<ExtArgs> | null
    where?: PaiementWhereInput
    orderBy?: PaiementOrderByWithRelationInput | PaiementOrderByWithRelationInput[]
    cursor?: PaiementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaiementScalarFieldEnum | PaiementScalarFieldEnum[]
  }

  /**
   * Frais without action
   */
  export type FraisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Frais
     */
    select?: FraisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FraisInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id_Us: 'id_Us',
    nom: 'nom',
    postnom: 'postnom',
    email: 'email',
    password: 'password',
    telephone: 'telephone'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id_rol: 'id_rol',
    description: 'description',
    userId: 'userId'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const EleveScalarFieldEnum: {
    id_El: 'id_El',
    nom: 'nom',
    postnom: 'postnom',
    prenom: 'prenom',
    sexe: 'sexe',
    adresse: 'adresse',
    email: 'email',
    telephone: 'telephone',
    classe: 'classe',
    tutId: 'tutId'
  };

  export type EleveScalarFieldEnum = (typeof EleveScalarFieldEnum)[keyof typeof EleveScalarFieldEnum]


  export const TuteurScalarFieldEnum: {
    id_Tut: 'id_Tut',
    nom: 'nom',
    postnom: 'postnom',
    prenom: 'prenom',
    sexe: 'sexe',
    adresse: 'adresse',
    email: 'email',
    telephone: 'telephone'
  };

  export type TuteurScalarFieldEnum = (typeof TuteurScalarFieldEnum)[keyof typeof TuteurScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id_Not: 'id_Not',
    message: 'message',
    date_envoie: 'date_envoie',
    tutId: 'tutId',
    caisId: 'caisId'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const CaissierScalarFieldEnum: {
    id_Cais: 'id_Cais',
    nom: 'nom',
    postnom: 'postnom',
    prenom: 'prenom',
    sexe: 'sexe',
    adresse: 'adresse',
    email: 'email',
    telephone: 'telephone'
  };

  export type CaissierScalarFieldEnum = (typeof CaissierScalarFieldEnum)[keyof typeof CaissierScalarFieldEnum]


  export const PaiementScalarFieldEnum: {
    id_Pai: 'id_Pai',
    montantapaye: 'montantapaye',
    montantpaye: 'montantpaye',
    Datedepaiement: 'Datedepaiement',
    tutId: 'tutId',
    caisId: 'caisId',
    fraiId: 'fraiId'
  };

  export type PaiementScalarFieldEnum = (typeof PaiementScalarFieldEnum)[keyof typeof PaiementScalarFieldEnum]


  export const FraisScalarFieldEnum: {
    id_Frai: 'id_Frai',
    libelle: 'libelle',
    montantFrais: 'montantFrais',
    DateLimite: 'DateLimite'
  };

  export type FraisScalarFieldEnum = (typeof FraisScalarFieldEnum)[keyof typeof FraisScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id_Us?: IntFilter<"User"> | number
    nom?: StringFilter<"User"> | string
    postnom?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    telephone?: IntFilter<"User"> | number
    roles?: RoleListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id_Us?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    telephone?: SortOrder
    roles?: RoleOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id_Us?: number
    email?: string
    telephone?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    nom?: StringFilter<"User"> | string
    postnom?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    roles?: RoleListRelationFilter
  }, "id_Us" | "email" | "telephone">

  export type UserOrderByWithAggregationInput = {
    id_Us?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    telephone?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id_Us?: IntWithAggregatesFilter<"User"> | number
    nom?: StringWithAggregatesFilter<"User"> | string
    postnom?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    telephone?: IntWithAggregatesFilter<"User"> | number
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id_rol?: IntFilter<"Role"> | number
    description?: StringFilter<"Role"> | string
    userId?: IntFilter<"Role"> | number
    users?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RoleOrderByWithRelationInput = {
    id_rol?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    users?: UserOrderByWithRelationInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id_rol?: number
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    description?: StringFilter<"Role"> | string
    userId?: IntFilter<"Role"> | number
    users?: XOR<UserRelationFilter, UserWhereInput>
  }, "id_rol">

  export type RoleOrderByWithAggregationInput = {
    id_rol?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id_rol?: IntWithAggregatesFilter<"Role"> | number
    description?: StringWithAggregatesFilter<"Role"> | string
    userId?: IntWithAggregatesFilter<"Role"> | number
  }

  export type EleveWhereInput = {
    AND?: EleveWhereInput | EleveWhereInput[]
    OR?: EleveWhereInput[]
    NOT?: EleveWhereInput | EleveWhereInput[]
    id_El?: IntFilter<"Eleve"> | number
    nom?: StringFilter<"Eleve"> | string
    postnom?: StringFilter<"Eleve"> | string
    prenom?: StringFilter<"Eleve"> | string
    sexe?: StringFilter<"Eleve"> | string
    adresse?: StringFilter<"Eleve"> | string
    email?: StringFilter<"Eleve"> | string
    telephone?: IntFilter<"Eleve"> | number
    classe?: StringFilter<"Eleve"> | string
    tutId?: IntFilter<"Eleve"> | number
    tuteurs?: XOR<TuteurRelationFilter, TuteurWhereInput>
  }

  export type EleveOrderByWithRelationInput = {
    id_El?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    prenom?: SortOrder
    sexe?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    classe?: SortOrder
    tutId?: SortOrder
    tuteurs?: TuteurOrderByWithRelationInput
  }

  export type EleveWhereUniqueInput = Prisma.AtLeast<{
    id_El?: number
    email?: string
    telephone?: number
    AND?: EleveWhereInput | EleveWhereInput[]
    OR?: EleveWhereInput[]
    NOT?: EleveWhereInput | EleveWhereInput[]
    nom?: StringFilter<"Eleve"> | string
    postnom?: StringFilter<"Eleve"> | string
    prenom?: StringFilter<"Eleve"> | string
    sexe?: StringFilter<"Eleve"> | string
    adresse?: StringFilter<"Eleve"> | string
    classe?: StringFilter<"Eleve"> | string
    tutId?: IntFilter<"Eleve"> | number
    tuteurs?: XOR<TuteurRelationFilter, TuteurWhereInput>
  }, "id_El" | "email" | "telephone">

  export type EleveOrderByWithAggregationInput = {
    id_El?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    prenom?: SortOrder
    sexe?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    classe?: SortOrder
    tutId?: SortOrder
    _count?: EleveCountOrderByAggregateInput
    _avg?: EleveAvgOrderByAggregateInput
    _max?: EleveMaxOrderByAggregateInput
    _min?: EleveMinOrderByAggregateInput
    _sum?: EleveSumOrderByAggregateInput
  }

  export type EleveScalarWhereWithAggregatesInput = {
    AND?: EleveScalarWhereWithAggregatesInput | EleveScalarWhereWithAggregatesInput[]
    OR?: EleveScalarWhereWithAggregatesInput[]
    NOT?: EleveScalarWhereWithAggregatesInput | EleveScalarWhereWithAggregatesInput[]
    id_El?: IntWithAggregatesFilter<"Eleve"> | number
    nom?: StringWithAggregatesFilter<"Eleve"> | string
    postnom?: StringWithAggregatesFilter<"Eleve"> | string
    prenom?: StringWithAggregatesFilter<"Eleve"> | string
    sexe?: StringWithAggregatesFilter<"Eleve"> | string
    adresse?: StringWithAggregatesFilter<"Eleve"> | string
    email?: StringWithAggregatesFilter<"Eleve"> | string
    telephone?: IntWithAggregatesFilter<"Eleve"> | number
    classe?: StringWithAggregatesFilter<"Eleve"> | string
    tutId?: IntWithAggregatesFilter<"Eleve"> | number
  }

  export type TuteurWhereInput = {
    AND?: TuteurWhereInput | TuteurWhereInput[]
    OR?: TuteurWhereInput[]
    NOT?: TuteurWhereInput | TuteurWhereInput[]
    id_Tut?: IntFilter<"Tuteur"> | number
    nom?: StringFilter<"Tuteur"> | string
    postnom?: StringFilter<"Tuteur"> | string
    prenom?: StringFilter<"Tuteur"> | string
    sexe?: StringFilter<"Tuteur"> | string
    adresse?: StringFilter<"Tuteur"> | string
    email?: StringFilter<"Tuteur"> | string
    telephone?: IntFilter<"Tuteur"> | number
    eleves?: EleveListRelationFilter
    notifications?: NotificationListRelationFilter
    paiements?: PaiementListRelationFilter
  }

  export type TuteurOrderByWithRelationInput = {
    id_Tut?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    prenom?: SortOrder
    sexe?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    eleves?: EleveOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    paiements?: PaiementOrderByRelationAggregateInput
  }

  export type TuteurWhereUniqueInput = Prisma.AtLeast<{
    id_Tut?: number
    email?: string
    telephone?: number
    AND?: TuteurWhereInput | TuteurWhereInput[]
    OR?: TuteurWhereInput[]
    NOT?: TuteurWhereInput | TuteurWhereInput[]
    nom?: StringFilter<"Tuteur"> | string
    postnom?: StringFilter<"Tuteur"> | string
    prenom?: StringFilter<"Tuteur"> | string
    sexe?: StringFilter<"Tuteur"> | string
    adresse?: StringFilter<"Tuteur"> | string
    eleves?: EleveListRelationFilter
    notifications?: NotificationListRelationFilter
    paiements?: PaiementListRelationFilter
  }, "id_Tut" | "email" | "telephone">

  export type TuteurOrderByWithAggregationInput = {
    id_Tut?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    prenom?: SortOrder
    sexe?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    _count?: TuteurCountOrderByAggregateInput
    _avg?: TuteurAvgOrderByAggregateInput
    _max?: TuteurMaxOrderByAggregateInput
    _min?: TuteurMinOrderByAggregateInput
    _sum?: TuteurSumOrderByAggregateInput
  }

  export type TuteurScalarWhereWithAggregatesInput = {
    AND?: TuteurScalarWhereWithAggregatesInput | TuteurScalarWhereWithAggregatesInput[]
    OR?: TuteurScalarWhereWithAggregatesInput[]
    NOT?: TuteurScalarWhereWithAggregatesInput | TuteurScalarWhereWithAggregatesInput[]
    id_Tut?: IntWithAggregatesFilter<"Tuteur"> | number
    nom?: StringWithAggregatesFilter<"Tuteur"> | string
    postnom?: StringWithAggregatesFilter<"Tuteur"> | string
    prenom?: StringWithAggregatesFilter<"Tuteur"> | string
    sexe?: StringWithAggregatesFilter<"Tuteur"> | string
    adresse?: StringWithAggregatesFilter<"Tuteur"> | string
    email?: StringWithAggregatesFilter<"Tuteur"> | string
    telephone?: IntWithAggregatesFilter<"Tuteur"> | number
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id_Not?: IntFilter<"Notification"> | number
    message?: StringFilter<"Notification"> | string
    date_envoie?: DateTimeFilter<"Notification"> | Date | string
    tutId?: IntFilter<"Notification"> | number
    caisId?: IntFilter<"Notification"> | number
    tuteurs?: XOR<TuteurRelationFilter, TuteurWhereInput>
    caissiers?: XOR<CaissierRelationFilter, CaissierWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id_Not?: SortOrder
    message?: SortOrder
    date_envoie?: SortOrder
    tutId?: SortOrder
    caisId?: SortOrder
    tuteurs?: TuteurOrderByWithRelationInput
    caissiers?: CaissierOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id_Not?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    message?: StringFilter<"Notification"> | string
    date_envoie?: DateTimeFilter<"Notification"> | Date | string
    tutId?: IntFilter<"Notification"> | number
    caisId?: IntFilter<"Notification"> | number
    tuteurs?: XOR<TuteurRelationFilter, TuteurWhereInput>
    caissiers?: XOR<CaissierRelationFilter, CaissierWhereInput>
  }, "id_Not">

  export type NotificationOrderByWithAggregationInput = {
    id_Not?: SortOrder
    message?: SortOrder
    date_envoie?: SortOrder
    tutId?: SortOrder
    caisId?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id_Not?: IntWithAggregatesFilter<"Notification"> | number
    message?: StringWithAggregatesFilter<"Notification"> | string
    date_envoie?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    tutId?: IntWithAggregatesFilter<"Notification"> | number
    caisId?: IntWithAggregatesFilter<"Notification"> | number
  }

  export type CaissierWhereInput = {
    AND?: CaissierWhereInput | CaissierWhereInput[]
    OR?: CaissierWhereInput[]
    NOT?: CaissierWhereInput | CaissierWhereInput[]
    id_Cais?: IntFilter<"Caissier"> | number
    nom?: StringFilter<"Caissier"> | string
    postnom?: StringFilter<"Caissier"> | string
    prenom?: StringFilter<"Caissier"> | string
    sexe?: StringFilter<"Caissier"> | string
    adresse?: StringFilter<"Caissier"> | string
    email?: StringFilter<"Caissier"> | string
    telephone?: IntFilter<"Caissier"> | number
    notifications?: NotificationListRelationFilter
    paiements?: PaiementListRelationFilter
  }

  export type CaissierOrderByWithRelationInput = {
    id_Cais?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    prenom?: SortOrder
    sexe?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    notifications?: NotificationOrderByRelationAggregateInput
    paiements?: PaiementOrderByRelationAggregateInput
  }

  export type CaissierWhereUniqueInput = Prisma.AtLeast<{
    id_Cais?: number
    email?: string
    telephone?: number
    AND?: CaissierWhereInput | CaissierWhereInput[]
    OR?: CaissierWhereInput[]
    NOT?: CaissierWhereInput | CaissierWhereInput[]
    nom?: StringFilter<"Caissier"> | string
    postnom?: StringFilter<"Caissier"> | string
    prenom?: StringFilter<"Caissier"> | string
    sexe?: StringFilter<"Caissier"> | string
    adresse?: StringFilter<"Caissier"> | string
    notifications?: NotificationListRelationFilter
    paiements?: PaiementListRelationFilter
  }, "id_Cais" | "email" | "telephone">

  export type CaissierOrderByWithAggregationInput = {
    id_Cais?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    prenom?: SortOrder
    sexe?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    _count?: CaissierCountOrderByAggregateInput
    _avg?: CaissierAvgOrderByAggregateInput
    _max?: CaissierMaxOrderByAggregateInput
    _min?: CaissierMinOrderByAggregateInput
    _sum?: CaissierSumOrderByAggregateInput
  }

  export type CaissierScalarWhereWithAggregatesInput = {
    AND?: CaissierScalarWhereWithAggregatesInput | CaissierScalarWhereWithAggregatesInput[]
    OR?: CaissierScalarWhereWithAggregatesInput[]
    NOT?: CaissierScalarWhereWithAggregatesInput | CaissierScalarWhereWithAggregatesInput[]
    id_Cais?: IntWithAggregatesFilter<"Caissier"> | number
    nom?: StringWithAggregatesFilter<"Caissier"> | string
    postnom?: StringWithAggregatesFilter<"Caissier"> | string
    prenom?: StringWithAggregatesFilter<"Caissier"> | string
    sexe?: StringWithAggregatesFilter<"Caissier"> | string
    adresse?: StringWithAggregatesFilter<"Caissier"> | string
    email?: StringWithAggregatesFilter<"Caissier"> | string
    telephone?: IntWithAggregatesFilter<"Caissier"> | number
  }

  export type PaiementWhereInput = {
    AND?: PaiementWhereInput | PaiementWhereInput[]
    OR?: PaiementWhereInput[]
    NOT?: PaiementWhereInput | PaiementWhereInput[]
    id_Pai?: IntFilter<"Paiement"> | number
    montantapaye?: IntFilter<"Paiement"> | number
    montantpaye?: IntFilter<"Paiement"> | number
    Datedepaiement?: DateTimeFilter<"Paiement"> | Date | string
    tutId?: IntFilter<"Paiement"> | number
    caisId?: IntFilter<"Paiement"> | number
    fraiId?: IntFilter<"Paiement"> | number
    tuteurs?: XOR<TuteurRelationFilter, TuteurWhereInput>
    caissiers?: XOR<CaissierRelationFilter, CaissierWhereInput>
    frais?: XOR<FraisRelationFilter, FraisWhereInput>
  }

  export type PaiementOrderByWithRelationInput = {
    id_Pai?: SortOrder
    montantapaye?: SortOrder
    montantpaye?: SortOrder
    Datedepaiement?: SortOrder
    tutId?: SortOrder
    caisId?: SortOrder
    fraiId?: SortOrder
    tuteurs?: TuteurOrderByWithRelationInput
    caissiers?: CaissierOrderByWithRelationInput
    frais?: FraisOrderByWithRelationInput
  }

  export type PaiementWhereUniqueInput = Prisma.AtLeast<{
    id_Pai?: number
    AND?: PaiementWhereInput | PaiementWhereInput[]
    OR?: PaiementWhereInput[]
    NOT?: PaiementWhereInput | PaiementWhereInput[]
    montantapaye?: IntFilter<"Paiement"> | number
    montantpaye?: IntFilter<"Paiement"> | number
    Datedepaiement?: DateTimeFilter<"Paiement"> | Date | string
    tutId?: IntFilter<"Paiement"> | number
    caisId?: IntFilter<"Paiement"> | number
    fraiId?: IntFilter<"Paiement"> | number
    tuteurs?: XOR<TuteurRelationFilter, TuteurWhereInput>
    caissiers?: XOR<CaissierRelationFilter, CaissierWhereInput>
    frais?: XOR<FraisRelationFilter, FraisWhereInput>
  }, "id_Pai">

  export type PaiementOrderByWithAggregationInput = {
    id_Pai?: SortOrder
    montantapaye?: SortOrder
    montantpaye?: SortOrder
    Datedepaiement?: SortOrder
    tutId?: SortOrder
    caisId?: SortOrder
    fraiId?: SortOrder
    _count?: PaiementCountOrderByAggregateInput
    _avg?: PaiementAvgOrderByAggregateInput
    _max?: PaiementMaxOrderByAggregateInput
    _min?: PaiementMinOrderByAggregateInput
    _sum?: PaiementSumOrderByAggregateInput
  }

  export type PaiementScalarWhereWithAggregatesInput = {
    AND?: PaiementScalarWhereWithAggregatesInput | PaiementScalarWhereWithAggregatesInput[]
    OR?: PaiementScalarWhereWithAggregatesInput[]
    NOT?: PaiementScalarWhereWithAggregatesInput | PaiementScalarWhereWithAggregatesInput[]
    id_Pai?: IntWithAggregatesFilter<"Paiement"> | number
    montantapaye?: IntWithAggregatesFilter<"Paiement"> | number
    montantpaye?: IntWithAggregatesFilter<"Paiement"> | number
    Datedepaiement?: DateTimeWithAggregatesFilter<"Paiement"> | Date | string
    tutId?: IntWithAggregatesFilter<"Paiement"> | number
    caisId?: IntWithAggregatesFilter<"Paiement"> | number
    fraiId?: IntWithAggregatesFilter<"Paiement"> | number
  }

  export type FraisWhereInput = {
    AND?: FraisWhereInput | FraisWhereInput[]
    OR?: FraisWhereInput[]
    NOT?: FraisWhereInput | FraisWhereInput[]
    id_Frai?: IntFilter<"Frais"> | number
    libelle?: StringFilter<"Frais"> | string
    montantFrais?: IntFilter<"Frais"> | number
    DateLimite?: DateTimeFilter<"Frais"> | Date | string
    paiements?: PaiementListRelationFilter
  }

  export type FraisOrderByWithRelationInput = {
    id_Frai?: SortOrder
    libelle?: SortOrder
    montantFrais?: SortOrder
    DateLimite?: SortOrder
    paiements?: PaiementOrderByRelationAggregateInput
  }

  export type FraisWhereUniqueInput = Prisma.AtLeast<{
    id_Frai?: number
    AND?: FraisWhereInput | FraisWhereInput[]
    OR?: FraisWhereInput[]
    NOT?: FraisWhereInput | FraisWhereInput[]
    libelle?: StringFilter<"Frais"> | string
    montantFrais?: IntFilter<"Frais"> | number
    DateLimite?: DateTimeFilter<"Frais"> | Date | string
    paiements?: PaiementListRelationFilter
  }, "id_Frai">

  export type FraisOrderByWithAggregationInput = {
    id_Frai?: SortOrder
    libelle?: SortOrder
    montantFrais?: SortOrder
    DateLimite?: SortOrder
    _count?: FraisCountOrderByAggregateInput
    _avg?: FraisAvgOrderByAggregateInput
    _max?: FraisMaxOrderByAggregateInput
    _min?: FraisMinOrderByAggregateInput
    _sum?: FraisSumOrderByAggregateInput
  }

  export type FraisScalarWhereWithAggregatesInput = {
    AND?: FraisScalarWhereWithAggregatesInput | FraisScalarWhereWithAggregatesInput[]
    OR?: FraisScalarWhereWithAggregatesInput[]
    NOT?: FraisScalarWhereWithAggregatesInput | FraisScalarWhereWithAggregatesInput[]
    id_Frai?: IntWithAggregatesFilter<"Frais"> | number
    libelle?: StringWithAggregatesFilter<"Frais"> | string
    montantFrais?: IntWithAggregatesFilter<"Frais"> | number
    DateLimite?: DateTimeWithAggregatesFilter<"Frais"> | Date | string
  }

  export type UserCreateInput = {
    nom: string
    postnom: string
    email: string
    password: string
    telephone: number
    roles?: RoleCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id_Us?: number
    nom: string
    postnom: string
    email: string
    password: string
    telephone: number
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    roles?: RoleUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id_Us?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserCreateManyInput = {
    id_Us?: number
    nom: string
    postnom: string
    email: string
    password: string
    telephone: number
  }

  export type UserUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    id_Us?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
  }

  export type RoleCreateInput = {
    description: string
    users: UserCreateNestedOneWithoutRolesInput
  }

  export type RoleUncheckedCreateInput = {
    id_rol?: number
    description: string
    userId: number
  }

  export type RoleUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateOneRequiredWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id_rol?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type RoleCreateManyInput = {
    id_rol?: number
    description: string
    userId: number
  }

  export type RoleUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id_rol?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type EleveCreateInput = {
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    classe: string
    tuteurs: TuteurCreateNestedOneWithoutElevesInput
  }

  export type EleveUncheckedCreateInput = {
    id_El?: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    classe: string
    tutId: number
  }

  export type EleveUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    classe?: StringFieldUpdateOperationsInput | string
    tuteurs?: TuteurUpdateOneRequiredWithoutElevesNestedInput
  }

  export type EleveUncheckedUpdateInput = {
    id_El?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    classe?: StringFieldUpdateOperationsInput | string
    tutId?: IntFieldUpdateOperationsInput | number
  }

  export type EleveCreateManyInput = {
    id_El?: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    classe: string
    tutId: number
  }

  export type EleveUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    classe?: StringFieldUpdateOperationsInput | string
  }

  export type EleveUncheckedUpdateManyInput = {
    id_El?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    classe?: StringFieldUpdateOperationsInput | string
    tutId?: IntFieldUpdateOperationsInput | number
  }

  export type TuteurCreateInput = {
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    eleves?: EleveCreateNestedManyWithoutTuteursInput
    notifications?: NotificationCreateNestedManyWithoutTuteursInput
    paiements?: PaiementCreateNestedManyWithoutTuteursInput
  }

  export type TuteurUncheckedCreateInput = {
    id_Tut?: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    eleves?: EleveUncheckedCreateNestedManyWithoutTuteursInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTuteursInput
    paiements?: PaiementUncheckedCreateNestedManyWithoutTuteursInput
  }

  export type TuteurUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    eleves?: EleveUpdateManyWithoutTuteursNestedInput
    notifications?: NotificationUpdateManyWithoutTuteursNestedInput
    paiements?: PaiementUpdateManyWithoutTuteursNestedInput
  }

  export type TuteurUncheckedUpdateInput = {
    id_Tut?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    eleves?: EleveUncheckedUpdateManyWithoutTuteursNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTuteursNestedInput
    paiements?: PaiementUncheckedUpdateManyWithoutTuteursNestedInput
  }

  export type TuteurCreateManyInput = {
    id_Tut?: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
  }

  export type TuteurUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
  }

  export type TuteurUncheckedUpdateManyInput = {
    id_Tut?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationCreateInput = {
    message: string
    date_envoie: Date | string
    tuteurs: TuteurCreateNestedOneWithoutNotificationsInput
    caissiers: CaissierCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id_Not?: number
    message: string
    date_envoie: Date | string
    tutId: number
    caisId: number
  }

  export type NotificationUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    date_envoie?: DateTimeFieldUpdateOperationsInput | Date | string
    tuteurs?: TuteurUpdateOneRequiredWithoutNotificationsNestedInput
    caissiers?: CaissierUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id_Not?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    date_envoie?: DateTimeFieldUpdateOperationsInput | Date | string
    tutId?: IntFieldUpdateOperationsInput | number
    caisId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationCreateManyInput = {
    id_Not?: number
    message: string
    date_envoie: Date | string
    tutId: number
    caisId: number
  }

  export type NotificationUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    date_envoie?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id_Not?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    date_envoie?: DateTimeFieldUpdateOperationsInput | Date | string
    tutId?: IntFieldUpdateOperationsInput | number
    caisId?: IntFieldUpdateOperationsInput | number
  }

  export type CaissierCreateInput = {
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    notifications?: NotificationCreateNestedManyWithoutCaissiersInput
    paiements?: PaiementCreateNestedManyWithoutCaissiersInput
  }

  export type CaissierUncheckedCreateInput = {
    id_Cais?: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    notifications?: NotificationUncheckedCreateNestedManyWithoutCaissiersInput
    paiements?: PaiementUncheckedCreateNestedManyWithoutCaissiersInput
  }

  export type CaissierUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    notifications?: NotificationUpdateManyWithoutCaissiersNestedInput
    paiements?: PaiementUpdateManyWithoutCaissiersNestedInput
  }

  export type CaissierUncheckedUpdateInput = {
    id_Cais?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    notifications?: NotificationUncheckedUpdateManyWithoutCaissiersNestedInput
    paiements?: PaiementUncheckedUpdateManyWithoutCaissiersNestedInput
  }

  export type CaissierCreateManyInput = {
    id_Cais?: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
  }

  export type CaissierUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
  }

  export type CaissierUncheckedUpdateManyInput = {
    id_Cais?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
  }

  export type PaiementCreateInput = {
    montantapaye: number
    montantpaye: number
    Datedepaiement: Date | string
    tuteurs: TuteurCreateNestedOneWithoutPaiementsInput
    caissiers: CaissierCreateNestedOneWithoutPaiementsInput
    frais: FraisCreateNestedOneWithoutPaiementsInput
  }

  export type PaiementUncheckedCreateInput = {
    id_Pai?: number
    montantapaye: number
    montantpaye: number
    Datedepaiement: Date | string
    tutId: number
    caisId: number
    fraiId: number
  }

  export type PaiementUpdateInput = {
    montantapaye?: IntFieldUpdateOperationsInput | number
    montantpaye?: IntFieldUpdateOperationsInput | number
    Datedepaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    tuteurs?: TuteurUpdateOneRequiredWithoutPaiementsNestedInput
    caissiers?: CaissierUpdateOneRequiredWithoutPaiementsNestedInput
    frais?: FraisUpdateOneRequiredWithoutPaiementsNestedInput
  }

  export type PaiementUncheckedUpdateInput = {
    id_Pai?: IntFieldUpdateOperationsInput | number
    montantapaye?: IntFieldUpdateOperationsInput | number
    montantpaye?: IntFieldUpdateOperationsInput | number
    Datedepaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    tutId?: IntFieldUpdateOperationsInput | number
    caisId?: IntFieldUpdateOperationsInput | number
    fraiId?: IntFieldUpdateOperationsInput | number
  }

  export type PaiementCreateManyInput = {
    id_Pai?: number
    montantapaye: number
    montantpaye: number
    Datedepaiement: Date | string
    tutId: number
    caisId: number
    fraiId: number
  }

  export type PaiementUpdateManyMutationInput = {
    montantapaye?: IntFieldUpdateOperationsInput | number
    montantpaye?: IntFieldUpdateOperationsInput | number
    Datedepaiement?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaiementUncheckedUpdateManyInput = {
    id_Pai?: IntFieldUpdateOperationsInput | number
    montantapaye?: IntFieldUpdateOperationsInput | number
    montantpaye?: IntFieldUpdateOperationsInput | number
    Datedepaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    tutId?: IntFieldUpdateOperationsInput | number
    caisId?: IntFieldUpdateOperationsInput | number
    fraiId?: IntFieldUpdateOperationsInput | number
  }

  export type FraisCreateInput = {
    libelle: string
    montantFrais: number
    DateLimite: Date | string
    paiements?: PaiementCreateNestedManyWithoutFraisInput
  }

  export type FraisUncheckedCreateInput = {
    id_Frai?: number
    libelle: string
    montantFrais: number
    DateLimite: Date | string
    paiements?: PaiementUncheckedCreateNestedManyWithoutFraisInput
  }

  export type FraisUpdateInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    montantFrais?: IntFieldUpdateOperationsInput | number
    DateLimite?: DateTimeFieldUpdateOperationsInput | Date | string
    paiements?: PaiementUpdateManyWithoutFraisNestedInput
  }

  export type FraisUncheckedUpdateInput = {
    id_Frai?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    montantFrais?: IntFieldUpdateOperationsInput | number
    DateLimite?: DateTimeFieldUpdateOperationsInput | Date | string
    paiements?: PaiementUncheckedUpdateManyWithoutFraisNestedInput
  }

  export type FraisCreateManyInput = {
    id_Frai?: number
    libelle: string
    montantFrais: number
    DateLimite: Date | string
  }

  export type FraisUpdateManyMutationInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    montantFrais?: IntFieldUpdateOperationsInput | number
    DateLimite?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FraisUncheckedUpdateManyInput = {
    id_Frai?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    montantFrais?: IntFieldUpdateOperationsInput | number
    DateLimite?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type RoleListRelationFilter = {
    every?: RoleWhereInput
    some?: RoleWhereInput
    none?: RoleWhereInput
  }

  export type RoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id_Us?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    telephone?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id_Us?: SortOrder
    telephone?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id_Us?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    telephone?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id_Us?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    telephone?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id_Us?: SortOrder
    telephone?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RoleCountOrderByAggregateInput = {
    id_rol?: SortOrder
    description?: SortOrder
    userId?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id_rol?: SortOrder
    userId?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id_rol?: SortOrder
    description?: SortOrder
    userId?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id_rol?: SortOrder
    description?: SortOrder
    userId?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id_rol?: SortOrder
    userId?: SortOrder
  }

  export type TuteurRelationFilter = {
    is?: TuteurWhereInput
    isNot?: TuteurWhereInput
  }

  export type EleveCountOrderByAggregateInput = {
    id_El?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    prenom?: SortOrder
    sexe?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    classe?: SortOrder
    tutId?: SortOrder
  }

  export type EleveAvgOrderByAggregateInput = {
    id_El?: SortOrder
    telephone?: SortOrder
    tutId?: SortOrder
  }

  export type EleveMaxOrderByAggregateInput = {
    id_El?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    prenom?: SortOrder
    sexe?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    classe?: SortOrder
    tutId?: SortOrder
  }

  export type EleveMinOrderByAggregateInput = {
    id_El?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    prenom?: SortOrder
    sexe?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    classe?: SortOrder
    tutId?: SortOrder
  }

  export type EleveSumOrderByAggregateInput = {
    id_El?: SortOrder
    telephone?: SortOrder
    tutId?: SortOrder
  }

  export type EleveListRelationFilter = {
    every?: EleveWhereInput
    some?: EleveWhereInput
    none?: EleveWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type PaiementListRelationFilter = {
    every?: PaiementWhereInput
    some?: PaiementWhereInput
    none?: PaiementWhereInput
  }

  export type EleveOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaiementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TuteurCountOrderByAggregateInput = {
    id_Tut?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    prenom?: SortOrder
    sexe?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
  }

  export type TuteurAvgOrderByAggregateInput = {
    id_Tut?: SortOrder
    telephone?: SortOrder
  }

  export type TuteurMaxOrderByAggregateInput = {
    id_Tut?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    prenom?: SortOrder
    sexe?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
  }

  export type TuteurMinOrderByAggregateInput = {
    id_Tut?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    prenom?: SortOrder
    sexe?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
  }

  export type TuteurSumOrderByAggregateInput = {
    id_Tut?: SortOrder
    telephone?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CaissierRelationFilter = {
    is?: CaissierWhereInput
    isNot?: CaissierWhereInput
  }

  export type NotificationCountOrderByAggregateInput = {
    id_Not?: SortOrder
    message?: SortOrder
    date_envoie?: SortOrder
    tutId?: SortOrder
    caisId?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id_Not?: SortOrder
    tutId?: SortOrder
    caisId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id_Not?: SortOrder
    message?: SortOrder
    date_envoie?: SortOrder
    tutId?: SortOrder
    caisId?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id_Not?: SortOrder
    message?: SortOrder
    date_envoie?: SortOrder
    tutId?: SortOrder
    caisId?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id_Not?: SortOrder
    tutId?: SortOrder
    caisId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CaissierCountOrderByAggregateInput = {
    id_Cais?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    prenom?: SortOrder
    sexe?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
  }

  export type CaissierAvgOrderByAggregateInput = {
    id_Cais?: SortOrder
    telephone?: SortOrder
  }

  export type CaissierMaxOrderByAggregateInput = {
    id_Cais?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    prenom?: SortOrder
    sexe?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
  }

  export type CaissierMinOrderByAggregateInput = {
    id_Cais?: SortOrder
    nom?: SortOrder
    postnom?: SortOrder
    prenom?: SortOrder
    sexe?: SortOrder
    adresse?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
  }

  export type CaissierSumOrderByAggregateInput = {
    id_Cais?: SortOrder
    telephone?: SortOrder
  }

  export type FraisRelationFilter = {
    is?: FraisWhereInput
    isNot?: FraisWhereInput
  }

  export type PaiementCountOrderByAggregateInput = {
    id_Pai?: SortOrder
    montantapaye?: SortOrder
    montantpaye?: SortOrder
    Datedepaiement?: SortOrder
    tutId?: SortOrder
    caisId?: SortOrder
    fraiId?: SortOrder
  }

  export type PaiementAvgOrderByAggregateInput = {
    id_Pai?: SortOrder
    montantapaye?: SortOrder
    montantpaye?: SortOrder
    tutId?: SortOrder
    caisId?: SortOrder
    fraiId?: SortOrder
  }

  export type PaiementMaxOrderByAggregateInput = {
    id_Pai?: SortOrder
    montantapaye?: SortOrder
    montantpaye?: SortOrder
    Datedepaiement?: SortOrder
    tutId?: SortOrder
    caisId?: SortOrder
    fraiId?: SortOrder
  }

  export type PaiementMinOrderByAggregateInput = {
    id_Pai?: SortOrder
    montantapaye?: SortOrder
    montantpaye?: SortOrder
    Datedepaiement?: SortOrder
    tutId?: SortOrder
    caisId?: SortOrder
    fraiId?: SortOrder
  }

  export type PaiementSumOrderByAggregateInput = {
    id_Pai?: SortOrder
    montantapaye?: SortOrder
    montantpaye?: SortOrder
    tutId?: SortOrder
    caisId?: SortOrder
    fraiId?: SortOrder
  }

  export type FraisCountOrderByAggregateInput = {
    id_Frai?: SortOrder
    libelle?: SortOrder
    montantFrais?: SortOrder
    DateLimite?: SortOrder
  }

  export type FraisAvgOrderByAggregateInput = {
    id_Frai?: SortOrder
    montantFrais?: SortOrder
  }

  export type FraisMaxOrderByAggregateInput = {
    id_Frai?: SortOrder
    libelle?: SortOrder
    montantFrais?: SortOrder
    DateLimite?: SortOrder
  }

  export type FraisMinOrderByAggregateInput = {
    id_Frai?: SortOrder
    libelle?: SortOrder
    montantFrais?: SortOrder
    DateLimite?: SortOrder
  }

  export type FraisSumOrderByAggregateInput = {
    id_Frai?: SortOrder
    montantFrais?: SortOrder
  }

  export type RoleCreateNestedManyWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput> | RoleCreateWithoutUsersInput[] | RoleUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput | RoleCreateOrConnectWithoutUsersInput[]
    createMany?: RoleCreateManyUsersInputEnvelope
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type RoleUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput> | RoleCreateWithoutUsersInput[] | RoleUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput | RoleCreateOrConnectWithoutUsersInput[]
    createMany?: RoleCreateManyUsersInputEnvelope
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RoleUpdateManyWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput> | RoleCreateWithoutUsersInput[] | RoleUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput | RoleCreateOrConnectWithoutUsersInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutUsersInput | RoleUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: RoleCreateManyUsersInputEnvelope
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutUsersInput | RoleUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutUsersInput | RoleUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type RoleUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput> | RoleCreateWithoutUsersInput[] | RoleUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput | RoleCreateOrConnectWithoutUsersInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutUsersInput | RoleUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: RoleCreateManyUsersInputEnvelope
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutUsersInput | RoleUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutUsersInput | RoleUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRolesInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput
    upsert?: UserUpsertWithoutRolesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRolesInput, UserUpdateWithoutRolesInput>, UserUncheckedUpdateWithoutRolesInput>
  }

  export type TuteurCreateNestedOneWithoutElevesInput = {
    create?: XOR<TuteurCreateWithoutElevesInput, TuteurUncheckedCreateWithoutElevesInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutElevesInput
    connect?: TuteurWhereUniqueInput
  }

  export type TuteurUpdateOneRequiredWithoutElevesNestedInput = {
    create?: XOR<TuteurCreateWithoutElevesInput, TuteurUncheckedCreateWithoutElevesInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutElevesInput
    upsert?: TuteurUpsertWithoutElevesInput
    connect?: TuteurWhereUniqueInput
    update?: XOR<XOR<TuteurUpdateToOneWithWhereWithoutElevesInput, TuteurUpdateWithoutElevesInput>, TuteurUncheckedUpdateWithoutElevesInput>
  }

  export type EleveCreateNestedManyWithoutTuteursInput = {
    create?: XOR<EleveCreateWithoutTuteursInput, EleveUncheckedCreateWithoutTuteursInput> | EleveCreateWithoutTuteursInput[] | EleveUncheckedCreateWithoutTuteursInput[]
    connectOrCreate?: EleveCreateOrConnectWithoutTuteursInput | EleveCreateOrConnectWithoutTuteursInput[]
    createMany?: EleveCreateManyTuteursInputEnvelope
    connect?: EleveWhereUniqueInput | EleveWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutTuteursInput = {
    create?: XOR<NotificationCreateWithoutTuteursInput, NotificationUncheckedCreateWithoutTuteursInput> | NotificationCreateWithoutTuteursInput[] | NotificationUncheckedCreateWithoutTuteursInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTuteursInput | NotificationCreateOrConnectWithoutTuteursInput[]
    createMany?: NotificationCreateManyTuteursInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type PaiementCreateNestedManyWithoutTuteursInput = {
    create?: XOR<PaiementCreateWithoutTuteursInput, PaiementUncheckedCreateWithoutTuteursInput> | PaiementCreateWithoutTuteursInput[] | PaiementUncheckedCreateWithoutTuteursInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutTuteursInput | PaiementCreateOrConnectWithoutTuteursInput[]
    createMany?: PaiementCreateManyTuteursInputEnvelope
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
  }

  export type EleveUncheckedCreateNestedManyWithoutTuteursInput = {
    create?: XOR<EleveCreateWithoutTuteursInput, EleveUncheckedCreateWithoutTuteursInput> | EleveCreateWithoutTuteursInput[] | EleveUncheckedCreateWithoutTuteursInput[]
    connectOrCreate?: EleveCreateOrConnectWithoutTuteursInput | EleveCreateOrConnectWithoutTuteursInput[]
    createMany?: EleveCreateManyTuteursInputEnvelope
    connect?: EleveWhereUniqueInput | EleveWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutTuteursInput = {
    create?: XOR<NotificationCreateWithoutTuteursInput, NotificationUncheckedCreateWithoutTuteursInput> | NotificationCreateWithoutTuteursInput[] | NotificationUncheckedCreateWithoutTuteursInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTuteursInput | NotificationCreateOrConnectWithoutTuteursInput[]
    createMany?: NotificationCreateManyTuteursInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type PaiementUncheckedCreateNestedManyWithoutTuteursInput = {
    create?: XOR<PaiementCreateWithoutTuteursInput, PaiementUncheckedCreateWithoutTuteursInput> | PaiementCreateWithoutTuteursInput[] | PaiementUncheckedCreateWithoutTuteursInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutTuteursInput | PaiementCreateOrConnectWithoutTuteursInput[]
    createMany?: PaiementCreateManyTuteursInputEnvelope
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
  }

  export type EleveUpdateManyWithoutTuteursNestedInput = {
    create?: XOR<EleveCreateWithoutTuteursInput, EleveUncheckedCreateWithoutTuteursInput> | EleveCreateWithoutTuteursInput[] | EleveUncheckedCreateWithoutTuteursInput[]
    connectOrCreate?: EleveCreateOrConnectWithoutTuteursInput | EleveCreateOrConnectWithoutTuteursInput[]
    upsert?: EleveUpsertWithWhereUniqueWithoutTuteursInput | EleveUpsertWithWhereUniqueWithoutTuteursInput[]
    createMany?: EleveCreateManyTuteursInputEnvelope
    set?: EleveWhereUniqueInput | EleveWhereUniqueInput[]
    disconnect?: EleveWhereUniqueInput | EleveWhereUniqueInput[]
    delete?: EleveWhereUniqueInput | EleveWhereUniqueInput[]
    connect?: EleveWhereUniqueInput | EleveWhereUniqueInput[]
    update?: EleveUpdateWithWhereUniqueWithoutTuteursInput | EleveUpdateWithWhereUniqueWithoutTuteursInput[]
    updateMany?: EleveUpdateManyWithWhereWithoutTuteursInput | EleveUpdateManyWithWhereWithoutTuteursInput[]
    deleteMany?: EleveScalarWhereInput | EleveScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutTuteursNestedInput = {
    create?: XOR<NotificationCreateWithoutTuteursInput, NotificationUncheckedCreateWithoutTuteursInput> | NotificationCreateWithoutTuteursInput[] | NotificationUncheckedCreateWithoutTuteursInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTuteursInput | NotificationCreateOrConnectWithoutTuteursInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutTuteursInput | NotificationUpsertWithWhereUniqueWithoutTuteursInput[]
    createMany?: NotificationCreateManyTuteursInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutTuteursInput | NotificationUpdateWithWhereUniqueWithoutTuteursInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutTuteursInput | NotificationUpdateManyWithWhereWithoutTuteursInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type PaiementUpdateManyWithoutTuteursNestedInput = {
    create?: XOR<PaiementCreateWithoutTuteursInput, PaiementUncheckedCreateWithoutTuteursInput> | PaiementCreateWithoutTuteursInput[] | PaiementUncheckedCreateWithoutTuteursInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutTuteursInput | PaiementCreateOrConnectWithoutTuteursInput[]
    upsert?: PaiementUpsertWithWhereUniqueWithoutTuteursInput | PaiementUpsertWithWhereUniqueWithoutTuteursInput[]
    createMany?: PaiementCreateManyTuteursInputEnvelope
    set?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    disconnect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    delete?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    update?: PaiementUpdateWithWhereUniqueWithoutTuteursInput | PaiementUpdateWithWhereUniqueWithoutTuteursInput[]
    updateMany?: PaiementUpdateManyWithWhereWithoutTuteursInput | PaiementUpdateManyWithWhereWithoutTuteursInput[]
    deleteMany?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
  }

  export type EleveUncheckedUpdateManyWithoutTuteursNestedInput = {
    create?: XOR<EleveCreateWithoutTuteursInput, EleveUncheckedCreateWithoutTuteursInput> | EleveCreateWithoutTuteursInput[] | EleveUncheckedCreateWithoutTuteursInput[]
    connectOrCreate?: EleveCreateOrConnectWithoutTuteursInput | EleveCreateOrConnectWithoutTuteursInput[]
    upsert?: EleveUpsertWithWhereUniqueWithoutTuteursInput | EleveUpsertWithWhereUniqueWithoutTuteursInput[]
    createMany?: EleveCreateManyTuteursInputEnvelope
    set?: EleveWhereUniqueInput | EleveWhereUniqueInput[]
    disconnect?: EleveWhereUniqueInput | EleveWhereUniqueInput[]
    delete?: EleveWhereUniqueInput | EleveWhereUniqueInput[]
    connect?: EleveWhereUniqueInput | EleveWhereUniqueInput[]
    update?: EleveUpdateWithWhereUniqueWithoutTuteursInput | EleveUpdateWithWhereUniqueWithoutTuteursInput[]
    updateMany?: EleveUpdateManyWithWhereWithoutTuteursInput | EleveUpdateManyWithWhereWithoutTuteursInput[]
    deleteMany?: EleveScalarWhereInput | EleveScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutTuteursNestedInput = {
    create?: XOR<NotificationCreateWithoutTuteursInput, NotificationUncheckedCreateWithoutTuteursInput> | NotificationCreateWithoutTuteursInput[] | NotificationUncheckedCreateWithoutTuteursInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTuteursInput | NotificationCreateOrConnectWithoutTuteursInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutTuteursInput | NotificationUpsertWithWhereUniqueWithoutTuteursInput[]
    createMany?: NotificationCreateManyTuteursInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutTuteursInput | NotificationUpdateWithWhereUniqueWithoutTuteursInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutTuteursInput | NotificationUpdateManyWithWhereWithoutTuteursInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type PaiementUncheckedUpdateManyWithoutTuteursNestedInput = {
    create?: XOR<PaiementCreateWithoutTuteursInput, PaiementUncheckedCreateWithoutTuteursInput> | PaiementCreateWithoutTuteursInput[] | PaiementUncheckedCreateWithoutTuteursInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutTuteursInput | PaiementCreateOrConnectWithoutTuteursInput[]
    upsert?: PaiementUpsertWithWhereUniqueWithoutTuteursInput | PaiementUpsertWithWhereUniqueWithoutTuteursInput[]
    createMany?: PaiementCreateManyTuteursInputEnvelope
    set?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    disconnect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    delete?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    update?: PaiementUpdateWithWhereUniqueWithoutTuteursInput | PaiementUpdateWithWhereUniqueWithoutTuteursInput[]
    updateMany?: PaiementUpdateManyWithWhereWithoutTuteursInput | PaiementUpdateManyWithWhereWithoutTuteursInput[]
    deleteMany?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
  }

  export type TuteurCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<TuteurCreateWithoutNotificationsInput, TuteurUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutNotificationsInput
    connect?: TuteurWhereUniqueInput
  }

  export type CaissierCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<CaissierCreateWithoutNotificationsInput, CaissierUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: CaissierCreateOrConnectWithoutNotificationsInput
    connect?: CaissierWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TuteurUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<TuteurCreateWithoutNotificationsInput, TuteurUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutNotificationsInput
    upsert?: TuteurUpsertWithoutNotificationsInput
    connect?: TuteurWhereUniqueInput
    update?: XOR<XOR<TuteurUpdateToOneWithWhereWithoutNotificationsInput, TuteurUpdateWithoutNotificationsInput>, TuteurUncheckedUpdateWithoutNotificationsInput>
  }

  export type CaissierUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<CaissierCreateWithoutNotificationsInput, CaissierUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: CaissierCreateOrConnectWithoutNotificationsInput
    upsert?: CaissierUpsertWithoutNotificationsInput
    connect?: CaissierWhereUniqueInput
    update?: XOR<XOR<CaissierUpdateToOneWithWhereWithoutNotificationsInput, CaissierUpdateWithoutNotificationsInput>, CaissierUncheckedUpdateWithoutNotificationsInput>
  }

  export type NotificationCreateNestedManyWithoutCaissiersInput = {
    create?: XOR<NotificationCreateWithoutCaissiersInput, NotificationUncheckedCreateWithoutCaissiersInput> | NotificationCreateWithoutCaissiersInput[] | NotificationUncheckedCreateWithoutCaissiersInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCaissiersInput | NotificationCreateOrConnectWithoutCaissiersInput[]
    createMany?: NotificationCreateManyCaissiersInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type PaiementCreateNestedManyWithoutCaissiersInput = {
    create?: XOR<PaiementCreateWithoutCaissiersInput, PaiementUncheckedCreateWithoutCaissiersInput> | PaiementCreateWithoutCaissiersInput[] | PaiementUncheckedCreateWithoutCaissiersInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutCaissiersInput | PaiementCreateOrConnectWithoutCaissiersInput[]
    createMany?: PaiementCreateManyCaissiersInputEnvelope
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutCaissiersInput = {
    create?: XOR<NotificationCreateWithoutCaissiersInput, NotificationUncheckedCreateWithoutCaissiersInput> | NotificationCreateWithoutCaissiersInput[] | NotificationUncheckedCreateWithoutCaissiersInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCaissiersInput | NotificationCreateOrConnectWithoutCaissiersInput[]
    createMany?: NotificationCreateManyCaissiersInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type PaiementUncheckedCreateNestedManyWithoutCaissiersInput = {
    create?: XOR<PaiementCreateWithoutCaissiersInput, PaiementUncheckedCreateWithoutCaissiersInput> | PaiementCreateWithoutCaissiersInput[] | PaiementUncheckedCreateWithoutCaissiersInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutCaissiersInput | PaiementCreateOrConnectWithoutCaissiersInput[]
    createMany?: PaiementCreateManyCaissiersInputEnvelope
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
  }

  export type NotificationUpdateManyWithoutCaissiersNestedInput = {
    create?: XOR<NotificationCreateWithoutCaissiersInput, NotificationUncheckedCreateWithoutCaissiersInput> | NotificationCreateWithoutCaissiersInput[] | NotificationUncheckedCreateWithoutCaissiersInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCaissiersInput | NotificationCreateOrConnectWithoutCaissiersInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutCaissiersInput | NotificationUpsertWithWhereUniqueWithoutCaissiersInput[]
    createMany?: NotificationCreateManyCaissiersInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutCaissiersInput | NotificationUpdateWithWhereUniqueWithoutCaissiersInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutCaissiersInput | NotificationUpdateManyWithWhereWithoutCaissiersInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type PaiementUpdateManyWithoutCaissiersNestedInput = {
    create?: XOR<PaiementCreateWithoutCaissiersInput, PaiementUncheckedCreateWithoutCaissiersInput> | PaiementCreateWithoutCaissiersInput[] | PaiementUncheckedCreateWithoutCaissiersInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutCaissiersInput | PaiementCreateOrConnectWithoutCaissiersInput[]
    upsert?: PaiementUpsertWithWhereUniqueWithoutCaissiersInput | PaiementUpsertWithWhereUniqueWithoutCaissiersInput[]
    createMany?: PaiementCreateManyCaissiersInputEnvelope
    set?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    disconnect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    delete?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    update?: PaiementUpdateWithWhereUniqueWithoutCaissiersInput | PaiementUpdateWithWhereUniqueWithoutCaissiersInput[]
    updateMany?: PaiementUpdateManyWithWhereWithoutCaissiersInput | PaiementUpdateManyWithWhereWithoutCaissiersInput[]
    deleteMany?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutCaissiersNestedInput = {
    create?: XOR<NotificationCreateWithoutCaissiersInput, NotificationUncheckedCreateWithoutCaissiersInput> | NotificationCreateWithoutCaissiersInput[] | NotificationUncheckedCreateWithoutCaissiersInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCaissiersInput | NotificationCreateOrConnectWithoutCaissiersInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutCaissiersInput | NotificationUpsertWithWhereUniqueWithoutCaissiersInput[]
    createMany?: NotificationCreateManyCaissiersInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutCaissiersInput | NotificationUpdateWithWhereUniqueWithoutCaissiersInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutCaissiersInput | NotificationUpdateManyWithWhereWithoutCaissiersInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type PaiementUncheckedUpdateManyWithoutCaissiersNestedInput = {
    create?: XOR<PaiementCreateWithoutCaissiersInput, PaiementUncheckedCreateWithoutCaissiersInput> | PaiementCreateWithoutCaissiersInput[] | PaiementUncheckedCreateWithoutCaissiersInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutCaissiersInput | PaiementCreateOrConnectWithoutCaissiersInput[]
    upsert?: PaiementUpsertWithWhereUniqueWithoutCaissiersInput | PaiementUpsertWithWhereUniqueWithoutCaissiersInput[]
    createMany?: PaiementCreateManyCaissiersInputEnvelope
    set?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    disconnect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    delete?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    update?: PaiementUpdateWithWhereUniqueWithoutCaissiersInput | PaiementUpdateWithWhereUniqueWithoutCaissiersInput[]
    updateMany?: PaiementUpdateManyWithWhereWithoutCaissiersInput | PaiementUpdateManyWithWhereWithoutCaissiersInput[]
    deleteMany?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
  }

  export type TuteurCreateNestedOneWithoutPaiementsInput = {
    create?: XOR<TuteurCreateWithoutPaiementsInput, TuteurUncheckedCreateWithoutPaiementsInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutPaiementsInput
    connect?: TuteurWhereUniqueInput
  }

  export type CaissierCreateNestedOneWithoutPaiementsInput = {
    create?: XOR<CaissierCreateWithoutPaiementsInput, CaissierUncheckedCreateWithoutPaiementsInput>
    connectOrCreate?: CaissierCreateOrConnectWithoutPaiementsInput
    connect?: CaissierWhereUniqueInput
  }

  export type FraisCreateNestedOneWithoutPaiementsInput = {
    create?: XOR<FraisCreateWithoutPaiementsInput, FraisUncheckedCreateWithoutPaiementsInput>
    connectOrCreate?: FraisCreateOrConnectWithoutPaiementsInput
    connect?: FraisWhereUniqueInput
  }

  export type TuteurUpdateOneRequiredWithoutPaiementsNestedInput = {
    create?: XOR<TuteurCreateWithoutPaiementsInput, TuteurUncheckedCreateWithoutPaiementsInput>
    connectOrCreate?: TuteurCreateOrConnectWithoutPaiementsInput
    upsert?: TuteurUpsertWithoutPaiementsInput
    connect?: TuteurWhereUniqueInput
    update?: XOR<XOR<TuteurUpdateToOneWithWhereWithoutPaiementsInput, TuteurUpdateWithoutPaiementsInput>, TuteurUncheckedUpdateWithoutPaiementsInput>
  }

  export type CaissierUpdateOneRequiredWithoutPaiementsNestedInput = {
    create?: XOR<CaissierCreateWithoutPaiementsInput, CaissierUncheckedCreateWithoutPaiementsInput>
    connectOrCreate?: CaissierCreateOrConnectWithoutPaiementsInput
    upsert?: CaissierUpsertWithoutPaiementsInput
    connect?: CaissierWhereUniqueInput
    update?: XOR<XOR<CaissierUpdateToOneWithWhereWithoutPaiementsInput, CaissierUpdateWithoutPaiementsInput>, CaissierUncheckedUpdateWithoutPaiementsInput>
  }

  export type FraisUpdateOneRequiredWithoutPaiementsNestedInput = {
    create?: XOR<FraisCreateWithoutPaiementsInput, FraisUncheckedCreateWithoutPaiementsInput>
    connectOrCreate?: FraisCreateOrConnectWithoutPaiementsInput
    upsert?: FraisUpsertWithoutPaiementsInput
    connect?: FraisWhereUniqueInput
    update?: XOR<XOR<FraisUpdateToOneWithWhereWithoutPaiementsInput, FraisUpdateWithoutPaiementsInput>, FraisUncheckedUpdateWithoutPaiementsInput>
  }

  export type PaiementCreateNestedManyWithoutFraisInput = {
    create?: XOR<PaiementCreateWithoutFraisInput, PaiementUncheckedCreateWithoutFraisInput> | PaiementCreateWithoutFraisInput[] | PaiementUncheckedCreateWithoutFraisInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutFraisInput | PaiementCreateOrConnectWithoutFraisInput[]
    createMany?: PaiementCreateManyFraisInputEnvelope
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
  }

  export type PaiementUncheckedCreateNestedManyWithoutFraisInput = {
    create?: XOR<PaiementCreateWithoutFraisInput, PaiementUncheckedCreateWithoutFraisInput> | PaiementCreateWithoutFraisInput[] | PaiementUncheckedCreateWithoutFraisInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutFraisInput | PaiementCreateOrConnectWithoutFraisInput[]
    createMany?: PaiementCreateManyFraisInputEnvelope
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
  }

  export type PaiementUpdateManyWithoutFraisNestedInput = {
    create?: XOR<PaiementCreateWithoutFraisInput, PaiementUncheckedCreateWithoutFraisInput> | PaiementCreateWithoutFraisInput[] | PaiementUncheckedCreateWithoutFraisInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutFraisInput | PaiementCreateOrConnectWithoutFraisInput[]
    upsert?: PaiementUpsertWithWhereUniqueWithoutFraisInput | PaiementUpsertWithWhereUniqueWithoutFraisInput[]
    createMany?: PaiementCreateManyFraisInputEnvelope
    set?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    disconnect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    delete?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    update?: PaiementUpdateWithWhereUniqueWithoutFraisInput | PaiementUpdateWithWhereUniqueWithoutFraisInput[]
    updateMany?: PaiementUpdateManyWithWhereWithoutFraisInput | PaiementUpdateManyWithWhereWithoutFraisInput[]
    deleteMany?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
  }

  export type PaiementUncheckedUpdateManyWithoutFraisNestedInput = {
    create?: XOR<PaiementCreateWithoutFraisInput, PaiementUncheckedCreateWithoutFraisInput> | PaiementCreateWithoutFraisInput[] | PaiementUncheckedCreateWithoutFraisInput[]
    connectOrCreate?: PaiementCreateOrConnectWithoutFraisInput | PaiementCreateOrConnectWithoutFraisInput[]
    upsert?: PaiementUpsertWithWhereUniqueWithoutFraisInput | PaiementUpsertWithWhereUniqueWithoutFraisInput[]
    createMany?: PaiementCreateManyFraisInputEnvelope
    set?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    disconnect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    delete?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    connect?: PaiementWhereUniqueInput | PaiementWhereUniqueInput[]
    update?: PaiementUpdateWithWhereUniqueWithoutFraisInput | PaiementUpdateWithWhereUniqueWithoutFraisInput[]
    updateMany?: PaiementUpdateManyWithWhereWithoutFraisInput | PaiementUpdateManyWithWhereWithoutFraisInput[]
    deleteMany?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RoleCreateWithoutUsersInput = {
    description: string
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id_rol?: number
    description: string
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type RoleCreateManyUsersInputEnvelope = {
    data: RoleCreateManyUsersInput | RoleCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type RoleUpsertWithWhereUniqueWithoutUsersInput = {
    where: RoleWhereUniqueInput
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type RoleUpdateWithWhereUniqueWithoutUsersInput = {
    where: RoleWhereUniqueInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateManyWithWhereWithoutUsersInput = {
    where: RoleScalarWhereInput
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyWithoutUsersInput>
  }

  export type RoleScalarWhereInput = {
    AND?: RoleScalarWhereInput | RoleScalarWhereInput[]
    OR?: RoleScalarWhereInput[]
    NOT?: RoleScalarWhereInput | RoleScalarWhereInput[]
    id_rol?: IntFilter<"Role"> | number
    description?: StringFilter<"Role"> | string
    userId?: IntFilter<"Role"> | number
  }

  export type UserCreateWithoutRolesInput = {
    nom: string
    postnom: string
    email: string
    password: string
    telephone: number
  }

  export type UserUncheckedCreateWithoutRolesInput = {
    id_Us?: number
    nom: string
    postnom: string
    email: string
    password: string
    telephone: number
  }

  export type UserCreateOrConnectWithoutRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
  }

  export type UserUpsertWithoutRolesInput = {
    update: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
  }

  export type UserUpdateWithoutRolesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateWithoutRolesInput = {
    id_Us?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
  }

  export type TuteurCreateWithoutElevesInput = {
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    notifications?: NotificationCreateNestedManyWithoutTuteursInput
    paiements?: PaiementCreateNestedManyWithoutTuteursInput
  }

  export type TuteurUncheckedCreateWithoutElevesInput = {
    id_Tut?: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    notifications?: NotificationUncheckedCreateNestedManyWithoutTuteursInput
    paiements?: PaiementUncheckedCreateNestedManyWithoutTuteursInput
  }

  export type TuteurCreateOrConnectWithoutElevesInput = {
    where: TuteurWhereUniqueInput
    create: XOR<TuteurCreateWithoutElevesInput, TuteurUncheckedCreateWithoutElevesInput>
  }

  export type TuteurUpsertWithoutElevesInput = {
    update: XOR<TuteurUpdateWithoutElevesInput, TuteurUncheckedUpdateWithoutElevesInput>
    create: XOR<TuteurCreateWithoutElevesInput, TuteurUncheckedCreateWithoutElevesInput>
    where?: TuteurWhereInput
  }

  export type TuteurUpdateToOneWithWhereWithoutElevesInput = {
    where?: TuteurWhereInput
    data: XOR<TuteurUpdateWithoutElevesInput, TuteurUncheckedUpdateWithoutElevesInput>
  }

  export type TuteurUpdateWithoutElevesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    notifications?: NotificationUpdateManyWithoutTuteursNestedInput
    paiements?: PaiementUpdateManyWithoutTuteursNestedInput
  }

  export type TuteurUncheckedUpdateWithoutElevesInput = {
    id_Tut?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    notifications?: NotificationUncheckedUpdateManyWithoutTuteursNestedInput
    paiements?: PaiementUncheckedUpdateManyWithoutTuteursNestedInput
  }

  export type EleveCreateWithoutTuteursInput = {
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    classe: string
  }

  export type EleveUncheckedCreateWithoutTuteursInput = {
    id_El?: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    classe: string
  }

  export type EleveCreateOrConnectWithoutTuteursInput = {
    where: EleveWhereUniqueInput
    create: XOR<EleveCreateWithoutTuteursInput, EleveUncheckedCreateWithoutTuteursInput>
  }

  export type EleveCreateManyTuteursInputEnvelope = {
    data: EleveCreateManyTuteursInput | EleveCreateManyTuteursInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutTuteursInput = {
    message: string
    date_envoie: Date | string
    caissiers: CaissierCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutTuteursInput = {
    id_Not?: number
    message: string
    date_envoie: Date | string
    caisId: number
  }

  export type NotificationCreateOrConnectWithoutTuteursInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutTuteursInput, NotificationUncheckedCreateWithoutTuteursInput>
  }

  export type NotificationCreateManyTuteursInputEnvelope = {
    data: NotificationCreateManyTuteursInput | NotificationCreateManyTuteursInput[]
    skipDuplicates?: boolean
  }

  export type PaiementCreateWithoutTuteursInput = {
    montantapaye: number
    montantpaye: number
    Datedepaiement: Date | string
    caissiers: CaissierCreateNestedOneWithoutPaiementsInput
    frais: FraisCreateNestedOneWithoutPaiementsInput
  }

  export type PaiementUncheckedCreateWithoutTuteursInput = {
    id_Pai?: number
    montantapaye: number
    montantpaye: number
    Datedepaiement: Date | string
    caisId: number
    fraiId: number
  }

  export type PaiementCreateOrConnectWithoutTuteursInput = {
    where: PaiementWhereUniqueInput
    create: XOR<PaiementCreateWithoutTuteursInput, PaiementUncheckedCreateWithoutTuteursInput>
  }

  export type PaiementCreateManyTuteursInputEnvelope = {
    data: PaiementCreateManyTuteursInput | PaiementCreateManyTuteursInput[]
    skipDuplicates?: boolean
  }

  export type EleveUpsertWithWhereUniqueWithoutTuteursInput = {
    where: EleveWhereUniqueInput
    update: XOR<EleveUpdateWithoutTuteursInput, EleveUncheckedUpdateWithoutTuteursInput>
    create: XOR<EleveCreateWithoutTuteursInput, EleveUncheckedCreateWithoutTuteursInput>
  }

  export type EleveUpdateWithWhereUniqueWithoutTuteursInput = {
    where: EleveWhereUniqueInput
    data: XOR<EleveUpdateWithoutTuteursInput, EleveUncheckedUpdateWithoutTuteursInput>
  }

  export type EleveUpdateManyWithWhereWithoutTuteursInput = {
    where: EleveScalarWhereInput
    data: XOR<EleveUpdateManyMutationInput, EleveUncheckedUpdateManyWithoutTuteursInput>
  }

  export type EleveScalarWhereInput = {
    AND?: EleveScalarWhereInput | EleveScalarWhereInput[]
    OR?: EleveScalarWhereInput[]
    NOT?: EleveScalarWhereInput | EleveScalarWhereInput[]
    id_El?: IntFilter<"Eleve"> | number
    nom?: StringFilter<"Eleve"> | string
    postnom?: StringFilter<"Eleve"> | string
    prenom?: StringFilter<"Eleve"> | string
    sexe?: StringFilter<"Eleve"> | string
    adresse?: StringFilter<"Eleve"> | string
    email?: StringFilter<"Eleve"> | string
    telephone?: IntFilter<"Eleve"> | number
    classe?: StringFilter<"Eleve"> | string
    tutId?: IntFilter<"Eleve"> | number
  }

  export type NotificationUpsertWithWhereUniqueWithoutTuteursInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutTuteursInput, NotificationUncheckedUpdateWithoutTuteursInput>
    create: XOR<NotificationCreateWithoutTuteursInput, NotificationUncheckedCreateWithoutTuteursInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutTuteursInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutTuteursInput, NotificationUncheckedUpdateWithoutTuteursInput>
  }

  export type NotificationUpdateManyWithWhereWithoutTuteursInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutTuteursInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id_Not?: IntFilter<"Notification"> | number
    message?: StringFilter<"Notification"> | string
    date_envoie?: DateTimeFilter<"Notification"> | Date | string
    tutId?: IntFilter<"Notification"> | number
    caisId?: IntFilter<"Notification"> | number
  }

  export type PaiementUpsertWithWhereUniqueWithoutTuteursInput = {
    where: PaiementWhereUniqueInput
    update: XOR<PaiementUpdateWithoutTuteursInput, PaiementUncheckedUpdateWithoutTuteursInput>
    create: XOR<PaiementCreateWithoutTuteursInput, PaiementUncheckedCreateWithoutTuteursInput>
  }

  export type PaiementUpdateWithWhereUniqueWithoutTuteursInput = {
    where: PaiementWhereUniqueInput
    data: XOR<PaiementUpdateWithoutTuteursInput, PaiementUncheckedUpdateWithoutTuteursInput>
  }

  export type PaiementUpdateManyWithWhereWithoutTuteursInput = {
    where: PaiementScalarWhereInput
    data: XOR<PaiementUpdateManyMutationInput, PaiementUncheckedUpdateManyWithoutTuteursInput>
  }

  export type PaiementScalarWhereInput = {
    AND?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
    OR?: PaiementScalarWhereInput[]
    NOT?: PaiementScalarWhereInput | PaiementScalarWhereInput[]
    id_Pai?: IntFilter<"Paiement"> | number
    montantapaye?: IntFilter<"Paiement"> | number
    montantpaye?: IntFilter<"Paiement"> | number
    Datedepaiement?: DateTimeFilter<"Paiement"> | Date | string
    tutId?: IntFilter<"Paiement"> | number
    caisId?: IntFilter<"Paiement"> | number
    fraiId?: IntFilter<"Paiement"> | number
  }

  export type TuteurCreateWithoutNotificationsInput = {
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    eleves?: EleveCreateNestedManyWithoutTuteursInput
    paiements?: PaiementCreateNestedManyWithoutTuteursInput
  }

  export type TuteurUncheckedCreateWithoutNotificationsInput = {
    id_Tut?: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    eleves?: EleveUncheckedCreateNestedManyWithoutTuteursInput
    paiements?: PaiementUncheckedCreateNestedManyWithoutTuteursInput
  }

  export type TuteurCreateOrConnectWithoutNotificationsInput = {
    where: TuteurWhereUniqueInput
    create: XOR<TuteurCreateWithoutNotificationsInput, TuteurUncheckedCreateWithoutNotificationsInput>
  }

  export type CaissierCreateWithoutNotificationsInput = {
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    paiements?: PaiementCreateNestedManyWithoutCaissiersInput
  }

  export type CaissierUncheckedCreateWithoutNotificationsInput = {
    id_Cais?: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    paiements?: PaiementUncheckedCreateNestedManyWithoutCaissiersInput
  }

  export type CaissierCreateOrConnectWithoutNotificationsInput = {
    where: CaissierWhereUniqueInput
    create: XOR<CaissierCreateWithoutNotificationsInput, CaissierUncheckedCreateWithoutNotificationsInput>
  }

  export type TuteurUpsertWithoutNotificationsInput = {
    update: XOR<TuteurUpdateWithoutNotificationsInput, TuteurUncheckedUpdateWithoutNotificationsInput>
    create: XOR<TuteurCreateWithoutNotificationsInput, TuteurUncheckedCreateWithoutNotificationsInput>
    where?: TuteurWhereInput
  }

  export type TuteurUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: TuteurWhereInput
    data: XOR<TuteurUpdateWithoutNotificationsInput, TuteurUncheckedUpdateWithoutNotificationsInput>
  }

  export type TuteurUpdateWithoutNotificationsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    eleves?: EleveUpdateManyWithoutTuteursNestedInput
    paiements?: PaiementUpdateManyWithoutTuteursNestedInput
  }

  export type TuteurUncheckedUpdateWithoutNotificationsInput = {
    id_Tut?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    eleves?: EleveUncheckedUpdateManyWithoutTuteursNestedInput
    paiements?: PaiementUncheckedUpdateManyWithoutTuteursNestedInput
  }

  export type CaissierUpsertWithoutNotificationsInput = {
    update: XOR<CaissierUpdateWithoutNotificationsInput, CaissierUncheckedUpdateWithoutNotificationsInput>
    create: XOR<CaissierCreateWithoutNotificationsInput, CaissierUncheckedCreateWithoutNotificationsInput>
    where?: CaissierWhereInput
  }

  export type CaissierUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: CaissierWhereInput
    data: XOR<CaissierUpdateWithoutNotificationsInput, CaissierUncheckedUpdateWithoutNotificationsInput>
  }

  export type CaissierUpdateWithoutNotificationsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    paiements?: PaiementUpdateManyWithoutCaissiersNestedInput
  }

  export type CaissierUncheckedUpdateWithoutNotificationsInput = {
    id_Cais?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    paiements?: PaiementUncheckedUpdateManyWithoutCaissiersNestedInput
  }

  export type NotificationCreateWithoutCaissiersInput = {
    message: string
    date_envoie: Date | string
    tuteurs: TuteurCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutCaissiersInput = {
    id_Not?: number
    message: string
    date_envoie: Date | string
    tutId: number
  }

  export type NotificationCreateOrConnectWithoutCaissiersInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutCaissiersInput, NotificationUncheckedCreateWithoutCaissiersInput>
  }

  export type NotificationCreateManyCaissiersInputEnvelope = {
    data: NotificationCreateManyCaissiersInput | NotificationCreateManyCaissiersInput[]
    skipDuplicates?: boolean
  }

  export type PaiementCreateWithoutCaissiersInput = {
    montantapaye: number
    montantpaye: number
    Datedepaiement: Date | string
    tuteurs: TuteurCreateNestedOneWithoutPaiementsInput
    frais: FraisCreateNestedOneWithoutPaiementsInput
  }

  export type PaiementUncheckedCreateWithoutCaissiersInput = {
    id_Pai?: number
    montantapaye: number
    montantpaye: number
    Datedepaiement: Date | string
    tutId: number
    fraiId: number
  }

  export type PaiementCreateOrConnectWithoutCaissiersInput = {
    where: PaiementWhereUniqueInput
    create: XOR<PaiementCreateWithoutCaissiersInput, PaiementUncheckedCreateWithoutCaissiersInput>
  }

  export type PaiementCreateManyCaissiersInputEnvelope = {
    data: PaiementCreateManyCaissiersInput | PaiementCreateManyCaissiersInput[]
    skipDuplicates?: boolean
  }

  export type NotificationUpsertWithWhereUniqueWithoutCaissiersInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutCaissiersInput, NotificationUncheckedUpdateWithoutCaissiersInput>
    create: XOR<NotificationCreateWithoutCaissiersInput, NotificationUncheckedCreateWithoutCaissiersInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutCaissiersInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutCaissiersInput, NotificationUncheckedUpdateWithoutCaissiersInput>
  }

  export type NotificationUpdateManyWithWhereWithoutCaissiersInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutCaissiersInput>
  }

  export type PaiementUpsertWithWhereUniqueWithoutCaissiersInput = {
    where: PaiementWhereUniqueInput
    update: XOR<PaiementUpdateWithoutCaissiersInput, PaiementUncheckedUpdateWithoutCaissiersInput>
    create: XOR<PaiementCreateWithoutCaissiersInput, PaiementUncheckedCreateWithoutCaissiersInput>
  }

  export type PaiementUpdateWithWhereUniqueWithoutCaissiersInput = {
    where: PaiementWhereUniqueInput
    data: XOR<PaiementUpdateWithoutCaissiersInput, PaiementUncheckedUpdateWithoutCaissiersInput>
  }

  export type PaiementUpdateManyWithWhereWithoutCaissiersInput = {
    where: PaiementScalarWhereInput
    data: XOR<PaiementUpdateManyMutationInput, PaiementUncheckedUpdateManyWithoutCaissiersInput>
  }

  export type TuteurCreateWithoutPaiementsInput = {
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    eleves?: EleveCreateNestedManyWithoutTuteursInput
    notifications?: NotificationCreateNestedManyWithoutTuteursInput
  }

  export type TuteurUncheckedCreateWithoutPaiementsInput = {
    id_Tut?: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    eleves?: EleveUncheckedCreateNestedManyWithoutTuteursInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTuteursInput
  }

  export type TuteurCreateOrConnectWithoutPaiementsInput = {
    where: TuteurWhereUniqueInput
    create: XOR<TuteurCreateWithoutPaiementsInput, TuteurUncheckedCreateWithoutPaiementsInput>
  }

  export type CaissierCreateWithoutPaiementsInput = {
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    notifications?: NotificationCreateNestedManyWithoutCaissiersInput
  }

  export type CaissierUncheckedCreateWithoutPaiementsInput = {
    id_Cais?: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    notifications?: NotificationUncheckedCreateNestedManyWithoutCaissiersInput
  }

  export type CaissierCreateOrConnectWithoutPaiementsInput = {
    where: CaissierWhereUniqueInput
    create: XOR<CaissierCreateWithoutPaiementsInput, CaissierUncheckedCreateWithoutPaiementsInput>
  }

  export type FraisCreateWithoutPaiementsInput = {
    libelle: string
    montantFrais: number
    DateLimite: Date | string
  }

  export type FraisUncheckedCreateWithoutPaiementsInput = {
    id_Frai?: number
    libelle: string
    montantFrais: number
    DateLimite: Date | string
  }

  export type FraisCreateOrConnectWithoutPaiementsInput = {
    where: FraisWhereUniqueInput
    create: XOR<FraisCreateWithoutPaiementsInput, FraisUncheckedCreateWithoutPaiementsInput>
  }

  export type TuteurUpsertWithoutPaiementsInput = {
    update: XOR<TuteurUpdateWithoutPaiementsInput, TuteurUncheckedUpdateWithoutPaiementsInput>
    create: XOR<TuteurCreateWithoutPaiementsInput, TuteurUncheckedCreateWithoutPaiementsInput>
    where?: TuteurWhereInput
  }

  export type TuteurUpdateToOneWithWhereWithoutPaiementsInput = {
    where?: TuteurWhereInput
    data: XOR<TuteurUpdateWithoutPaiementsInput, TuteurUncheckedUpdateWithoutPaiementsInput>
  }

  export type TuteurUpdateWithoutPaiementsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    eleves?: EleveUpdateManyWithoutTuteursNestedInput
    notifications?: NotificationUpdateManyWithoutTuteursNestedInput
  }

  export type TuteurUncheckedUpdateWithoutPaiementsInput = {
    id_Tut?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    eleves?: EleveUncheckedUpdateManyWithoutTuteursNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTuteursNestedInput
  }

  export type CaissierUpsertWithoutPaiementsInput = {
    update: XOR<CaissierUpdateWithoutPaiementsInput, CaissierUncheckedUpdateWithoutPaiementsInput>
    create: XOR<CaissierCreateWithoutPaiementsInput, CaissierUncheckedCreateWithoutPaiementsInput>
    where?: CaissierWhereInput
  }

  export type CaissierUpdateToOneWithWhereWithoutPaiementsInput = {
    where?: CaissierWhereInput
    data: XOR<CaissierUpdateWithoutPaiementsInput, CaissierUncheckedUpdateWithoutPaiementsInput>
  }

  export type CaissierUpdateWithoutPaiementsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    notifications?: NotificationUpdateManyWithoutCaissiersNestedInput
  }

  export type CaissierUncheckedUpdateWithoutPaiementsInput = {
    id_Cais?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    notifications?: NotificationUncheckedUpdateManyWithoutCaissiersNestedInput
  }

  export type FraisUpsertWithoutPaiementsInput = {
    update: XOR<FraisUpdateWithoutPaiementsInput, FraisUncheckedUpdateWithoutPaiementsInput>
    create: XOR<FraisCreateWithoutPaiementsInput, FraisUncheckedCreateWithoutPaiementsInput>
    where?: FraisWhereInput
  }

  export type FraisUpdateToOneWithWhereWithoutPaiementsInput = {
    where?: FraisWhereInput
    data: XOR<FraisUpdateWithoutPaiementsInput, FraisUncheckedUpdateWithoutPaiementsInput>
  }

  export type FraisUpdateWithoutPaiementsInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    montantFrais?: IntFieldUpdateOperationsInput | number
    DateLimite?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FraisUncheckedUpdateWithoutPaiementsInput = {
    id_Frai?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    montantFrais?: IntFieldUpdateOperationsInput | number
    DateLimite?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaiementCreateWithoutFraisInput = {
    montantapaye: number
    montantpaye: number
    Datedepaiement: Date | string
    tuteurs: TuteurCreateNestedOneWithoutPaiementsInput
    caissiers: CaissierCreateNestedOneWithoutPaiementsInput
  }

  export type PaiementUncheckedCreateWithoutFraisInput = {
    id_Pai?: number
    montantapaye: number
    montantpaye: number
    Datedepaiement: Date | string
    tutId: number
    caisId: number
  }

  export type PaiementCreateOrConnectWithoutFraisInput = {
    where: PaiementWhereUniqueInput
    create: XOR<PaiementCreateWithoutFraisInput, PaiementUncheckedCreateWithoutFraisInput>
  }

  export type PaiementCreateManyFraisInputEnvelope = {
    data: PaiementCreateManyFraisInput | PaiementCreateManyFraisInput[]
    skipDuplicates?: boolean
  }

  export type PaiementUpsertWithWhereUniqueWithoutFraisInput = {
    where: PaiementWhereUniqueInput
    update: XOR<PaiementUpdateWithoutFraisInput, PaiementUncheckedUpdateWithoutFraisInput>
    create: XOR<PaiementCreateWithoutFraisInput, PaiementUncheckedCreateWithoutFraisInput>
  }

  export type PaiementUpdateWithWhereUniqueWithoutFraisInput = {
    where: PaiementWhereUniqueInput
    data: XOR<PaiementUpdateWithoutFraisInput, PaiementUncheckedUpdateWithoutFraisInput>
  }

  export type PaiementUpdateManyWithWhereWithoutFraisInput = {
    where: PaiementScalarWhereInput
    data: XOR<PaiementUpdateManyMutationInput, PaiementUncheckedUpdateManyWithoutFraisInput>
  }

  export type RoleCreateManyUsersInput = {
    id_rol?: number
    description: string
  }

  export type RoleUpdateWithoutUsersInput = {
    description?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id_rol?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyWithoutUsersInput = {
    id_rol?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type EleveCreateManyTuteursInput = {
    id_El?: number
    nom: string
    postnom: string
    prenom: string
    sexe: string
    adresse: string
    email: string
    telephone: number
    classe: string
  }

  export type NotificationCreateManyTuteursInput = {
    id_Not?: number
    message: string
    date_envoie: Date | string
    caisId: number
  }

  export type PaiementCreateManyTuteursInput = {
    id_Pai?: number
    montantapaye: number
    montantpaye: number
    Datedepaiement: Date | string
    caisId: number
    fraiId: number
  }

  export type EleveUpdateWithoutTuteursInput = {
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    classe?: StringFieldUpdateOperationsInput | string
  }

  export type EleveUncheckedUpdateWithoutTuteursInput = {
    id_El?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    classe?: StringFieldUpdateOperationsInput | string
  }

  export type EleveUncheckedUpdateManyWithoutTuteursInput = {
    id_El?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    postnom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    sexe?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: IntFieldUpdateOperationsInput | number
    classe?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUpdateWithoutTuteursInput = {
    message?: StringFieldUpdateOperationsInput | string
    date_envoie?: DateTimeFieldUpdateOperationsInput | Date | string
    caissiers?: CaissierUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutTuteursInput = {
    id_Not?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    date_envoie?: DateTimeFieldUpdateOperationsInput | Date | string
    caisId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationUncheckedUpdateManyWithoutTuteursInput = {
    id_Not?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    date_envoie?: DateTimeFieldUpdateOperationsInput | Date | string
    caisId?: IntFieldUpdateOperationsInput | number
  }

  export type PaiementUpdateWithoutTuteursInput = {
    montantapaye?: IntFieldUpdateOperationsInput | number
    montantpaye?: IntFieldUpdateOperationsInput | number
    Datedepaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    caissiers?: CaissierUpdateOneRequiredWithoutPaiementsNestedInput
    frais?: FraisUpdateOneRequiredWithoutPaiementsNestedInput
  }

  export type PaiementUncheckedUpdateWithoutTuteursInput = {
    id_Pai?: IntFieldUpdateOperationsInput | number
    montantapaye?: IntFieldUpdateOperationsInput | number
    montantpaye?: IntFieldUpdateOperationsInput | number
    Datedepaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    caisId?: IntFieldUpdateOperationsInput | number
    fraiId?: IntFieldUpdateOperationsInput | number
  }

  export type PaiementUncheckedUpdateManyWithoutTuteursInput = {
    id_Pai?: IntFieldUpdateOperationsInput | number
    montantapaye?: IntFieldUpdateOperationsInput | number
    montantpaye?: IntFieldUpdateOperationsInput | number
    Datedepaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    caisId?: IntFieldUpdateOperationsInput | number
    fraiId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationCreateManyCaissiersInput = {
    id_Not?: number
    message: string
    date_envoie: Date | string
    tutId: number
  }

  export type PaiementCreateManyCaissiersInput = {
    id_Pai?: number
    montantapaye: number
    montantpaye: number
    Datedepaiement: Date | string
    tutId: number
    fraiId: number
  }

  export type NotificationUpdateWithoutCaissiersInput = {
    message?: StringFieldUpdateOperationsInput | string
    date_envoie?: DateTimeFieldUpdateOperationsInput | Date | string
    tuteurs?: TuteurUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutCaissiersInput = {
    id_Not?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    date_envoie?: DateTimeFieldUpdateOperationsInput | Date | string
    tutId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationUncheckedUpdateManyWithoutCaissiersInput = {
    id_Not?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    date_envoie?: DateTimeFieldUpdateOperationsInput | Date | string
    tutId?: IntFieldUpdateOperationsInput | number
  }

  export type PaiementUpdateWithoutCaissiersInput = {
    montantapaye?: IntFieldUpdateOperationsInput | number
    montantpaye?: IntFieldUpdateOperationsInput | number
    Datedepaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    tuteurs?: TuteurUpdateOneRequiredWithoutPaiementsNestedInput
    frais?: FraisUpdateOneRequiredWithoutPaiementsNestedInput
  }

  export type PaiementUncheckedUpdateWithoutCaissiersInput = {
    id_Pai?: IntFieldUpdateOperationsInput | number
    montantapaye?: IntFieldUpdateOperationsInput | number
    montantpaye?: IntFieldUpdateOperationsInput | number
    Datedepaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    tutId?: IntFieldUpdateOperationsInput | number
    fraiId?: IntFieldUpdateOperationsInput | number
  }

  export type PaiementUncheckedUpdateManyWithoutCaissiersInput = {
    id_Pai?: IntFieldUpdateOperationsInput | number
    montantapaye?: IntFieldUpdateOperationsInput | number
    montantpaye?: IntFieldUpdateOperationsInput | number
    Datedepaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    tutId?: IntFieldUpdateOperationsInput | number
    fraiId?: IntFieldUpdateOperationsInput | number
  }

  export type PaiementCreateManyFraisInput = {
    id_Pai?: number
    montantapaye: number
    montantpaye: number
    Datedepaiement: Date | string
    tutId: number
    caisId: number
  }

  export type PaiementUpdateWithoutFraisInput = {
    montantapaye?: IntFieldUpdateOperationsInput | number
    montantpaye?: IntFieldUpdateOperationsInput | number
    Datedepaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    tuteurs?: TuteurUpdateOneRequiredWithoutPaiementsNestedInput
    caissiers?: CaissierUpdateOneRequiredWithoutPaiementsNestedInput
  }

  export type PaiementUncheckedUpdateWithoutFraisInput = {
    id_Pai?: IntFieldUpdateOperationsInput | number
    montantapaye?: IntFieldUpdateOperationsInput | number
    montantpaye?: IntFieldUpdateOperationsInput | number
    Datedepaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    tutId?: IntFieldUpdateOperationsInput | number
    caisId?: IntFieldUpdateOperationsInput | number
  }

  export type PaiementUncheckedUpdateManyWithoutFraisInput = {
    id_Pai?: IntFieldUpdateOperationsInput | number
    montantapaye?: IntFieldUpdateOperationsInput | number
    montantpaye?: IntFieldUpdateOperationsInput | number
    Datedepaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    tutId?: IntFieldUpdateOperationsInput | number
    caisId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TuteurCountOutputTypeDefaultArgs instead
     */
    export type TuteurCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TuteurCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaissierCountOutputTypeDefaultArgs instead
     */
    export type CaissierCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaissierCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FraisCountOutputTypeDefaultArgs instead
     */
    export type FraisCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FraisCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EleveDefaultArgs instead
     */
    export type EleveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EleveDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TuteurDefaultArgs instead
     */
    export type TuteurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TuteurDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaissierDefaultArgs instead
     */
    export type CaissierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaissierDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaiementDefaultArgs instead
     */
    export type PaiementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaiementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FraisDefaultArgs instead
     */
    export type FraisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FraisDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}